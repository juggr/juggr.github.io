{"version":3,"sources":["webpack:///./src/templates/talk-page.js","webpack:///./src/utils/format-date.js","webpack:///./src/components/speaker-profile.js","webpack:///./src/components/talk-content.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_talk_content__WEBPACK_IMPORTED_MODULE_2__","TalkPage","_ref","data","talk","speakers","location","speakerList","edges","map","edge","node","a","createElement","linkToDetailsPage","moment__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_0___default","moment","locale","formatDate","date","format","SpeakerProfile","speaker","react_default","Container","Row","frontmatter","pic","Col","sm","xs","style","textAlign","maxWidth","gatsby_browser_entry","to","fields","slug","gatsby_image_default","alt","fluid","childImageSharp","name","twitter_name","href","className","dangerouslySetInnerHTML","__html","html","SpeakerHeadline","R","key","LocationInfo","_ref2","info","Fragment","street","number","zip","city","TagsLine","_ref3","tags","tag","index_es","icon","faTag","Headline","_ref4","title","TalkContent","_ref5","_talk$frontmatter$tim","talk_content_Headline","talk_content_SpeakerHeadline","talk_content_TagsLine","poster","id","speaker_profile","time","virtual","talk_content_LocationInfo"],"mappings":"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","file":"component---src-templates-talk-page-js-c070664fde008392b245.js","sourcesContent":["import React from \"react\"\n\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nimport TalkContent from \"../components/talk-content\"\n\nconst TalkPage = ({ data }) => {\n  const { talk, speakers, location } = data\n\n  const speakerList = speakers.edges.map(edge => edge.node)\n\n  return (\n    <Layout>\n      <TalkContent talk={talk} speakerList={speakerList} location={location} linkToDetailsPage={false} />\n    </Layout>\n  )\n}\n\nexport default TalkPage\n\nexport const query = graphql`\n  query($slug: String!, $speakerSlugs: [String]!, $locationSlug: String!) {\n    talk: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date\n        time\n        virtual\n        tags\n        poster {\n          childImageSharp {\n            id\n            fluid {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(\n      filter: { fields: { slug: { in: $speakerSlugs } } }\n      sort: { fields: frontmatter___name, order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            name\n            pic {\n              childImageSharp {\n                fluid(maxWidth: 400) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            twitter_name\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    location: markdownRemark(fields: { slug: { eq: $locationSlug } }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        name\n        number\n        info\n        zip\n        city\n        street\n      }\n    }\n  }\n`\n","import moment from \"moment\"\n\nimport \"moment/locale/de\"\n\nmoment.locale(\"de\")\n\nconst formatDate = date => moment(date).format(\"LL\")\n\nexport default formatDate","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Img from \"gatsby-image\"\n\nimport { Container, Col, Row } from \"reactstrap\"\n\nconst SpeakerProfile = ({ speaker }) => {\n  return (\n    <Container>\n      <Row>\n        {speaker.frontmatter.pic && (\n          <Col sm=\"6\" xs=\"12\" style={{textAlign: \"center\", maxWidth: \"400px\"}}>\n            <Link to={speaker.fields.slug}>\n              <Img alt=\"speaker\" fluid={speaker.frontmatter.pic.childImageSharp.fluid} />\n            </Link>\n          </Col>\n        )}\n\n        <Col sm=\"6\" xs=\"12\">\n          <div>\n            <p>\n              <Link to={speaker.fields.slug}>\n                <strong>{speaker.frontmatter.name}</strong>\n              </Link>\n            </p>\n\n            {speaker.frontmatter.twitter_name && (\n              <p>\n                Twitter:{\" \"}\n                <a href={`https://twitter.com/${speaker.frontmatter.twitter_name}`}>{`@${\n                  speaker.frontmatter.twitter_name\n                }`}</a>\n              </p>\n            )}\n          </div>\n\n          <div className=\"description\" dangerouslySetInnerHTML={{ __html: speaker.html }} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default SpeakerProfile\n","import React from \"react\"\nimport formatDate from \"../utils/format-date\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { Link } from \"gatsby\"\n\nimport * as R from \"ramda\"\nimport SpeakerProfile from \"./speaker-profile\"\n\nimport Img from \"gatsby-image\"\n\nconst SpeakerHeadline = ({ speakerList }) => (\n  <span className=\"lead\">\n    von{\" \"}\n    {R.intersperse(\", \")(\n      speakerList.map(speaker => (\n        <Link key={speaker.fields.slug} to={speaker.fields.slug}>\n          {speaker.frontmatter.name}\n        </Link>\n      ))\n    )}\n  </span>\n)\n\nconst LocationInfo = ({ location }) => {\n  const { frontmatter } = location\n\n  return (\n    <Link to={location.fields.slug}>\n      <address>\n        {frontmatter.name}\n        <br />\n        {frontmatter.info && (\n          <>\n            {frontmatter.info}\n            <br />\n          </>\n        )}\n        {`${frontmatter.street} ${frontmatter.number}`}\n        <br />\n        {`${frontmatter.zip} ${frontmatter.city}`}\n        <br />\n      </address>\n    </Link>\n  )\n}\n\nconst TagsLine = ({ tags }) => {\n  if (tags) {\n    return (\n      <>\n        {R.intersperse(\", \")(\n          tags.map(tag => (\n            <Link key={tag} to={`/tags/#${tag}`}>\n              <FontAwesomeIcon icon={faTag} /> {tag}\n            </Link>\n          ))\n        )}\n      </>\n    )\n  } else {\n    return null\n  }\n}\n\nconst Headline = ({ talk, linkToDetailsPage }) => {\n  if (linkToDetailsPage) {\n    return (\n      <h2>\n        <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\n      </h2>\n    )\n  } else {\n    return <h2>{talk.frontmatter.title}</h2>\n  }\n}\n\nconst TalkContent = ({ talk, speakerList, location, linkToDetailsPage }) => (\n  <>\n    <Headline talk={talk} linkToDetailsPage={linkToDetailsPage} />\n    <SpeakerHeadline speakerList={speakerList} /> | {formatDate(talk.frontmatter.date)}\n    <p>\n      <TagsLine tags={talk.frontmatter.tags} />\n    </p>\n    <article className=\"talk-content\">\n      <div dangerouslySetInnerHTML={{ __html: talk.html }} />\n\n      {talk.frontmatter.poster && (\n        <Link to={`/posters#${talk.frontmatter.poster.childImageSharp.id}`}>\n          <Img fluid={talk.frontmatter.poster.childImageSharp.fluid} />\n        </Link>\n      )}\n\n      <hr />\n\n      {speakerList.map(speaker => (\n        <SpeakerProfile key={speaker.id} speaker={speaker} />\n      ))}\n\n      <hr />\n\n      <div>\n        <p>\n          Datum: {formatDate(talk.frontmatter.date)}, {talk.frontmatter.time ?? \"19:00 Uhr\"}\n        </p>\n        {talk.frontmatter.virtual ? (\n          <>Das Treffen findet Online statt. Siehe Beschreibung.</>\n        ) : (\n          <>Ort: {location ? <LocationInfo location={location} /> : <span>wird noch bekannt gegeben</span>}</>\n        )}\n      </div>\n\n      <br />\n      <p>\n        Die Veranstaltung wird durch die <i>Java User Group Görlitz</i> (im{\" \"}\n        <a href=\"http://www.ijug.eu/\">iJUG Verband</a>) organisiert.\n      </p>\n    </article>\n  </>\n)\n\nexport default TalkContent\n"],"sourceRoot":""}