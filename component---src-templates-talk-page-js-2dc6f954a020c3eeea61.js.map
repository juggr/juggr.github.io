{"version":3,"sources":["webpack:///./src/components/speaker-profile.js","webpack:///./src/components/talk-content.js","webpack:///./src/templates/talk-page.js"],"names":["SpeakerProfile","speaker","Container","Row","frontmatter","pic","Col","sm","xs","style","textAlign","maxWidth","to","fields","slug","alt","fluid","childImageSharp","name","twitter_name","href","className","dangerouslySetInnerHTML","__html","html","SpeakerHeadline","speakerList","R","map","key","LocationInfo","location","info","street","number","zip","city","TagsLine","tags","tag","icon","faTag","Headline","talk","linkToDetailsPage","title","TalkContent","formatDate","date","poster","id","time","virtual","TalkPage","data","speakers","edges","edge","node","query"],"mappings":"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","file":"component---src-templates-talk-page-js-2dc6f954a020c3eeea61.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Img from \"gatsby-image\"\n\nimport { Container, Col, Row } from \"reactstrap\"\n\nconst SpeakerProfile = ({ speaker }) => {\n  return (\n    <Container>\n      <Row>\n        {speaker.frontmatter.pic && (\n          <Col sm=\"6\" xs=\"12\" style={{textAlign: \"center\", maxWidth: \"400px\"}}>\n            <Link to={speaker.fields.slug}>\n              <Img alt=\"speaker\" fluid={speaker.frontmatter.pic.childImageSharp.fluid} />\n            </Link>\n          </Col>\n        )}\n\n        <Col sm=\"6\" xs=\"12\">\n          <div>\n            <p>\n              <Link to={speaker.fields.slug}>\n                <strong>{speaker.frontmatter.name}</strong>\n              </Link>\n            </p>\n\n            {speaker.frontmatter.twitter_name && (\n              <p>\n                Twitter:{\" \"}\n                <a href={`https://twitter.com/${speaker.frontmatter.twitter_name}`}>{`@${\n                  speaker.frontmatter.twitter_name\n                }`}</a>\n              </p>\n            )}\n          </div>\n\n          <div className=\"description\" dangerouslySetInnerHTML={{ __html: speaker.html }} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default SpeakerProfile\n","import React from \"react\"\nimport formatDate from \"../utils/format-date\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { Link } from \"gatsby\"\n\nimport * as R from \"ramda\"\nimport SpeakerProfile from \"./speaker-profile\"\n\nimport Img from \"gatsby-image\"\n\nconst SpeakerHeadline = ({ speakerList }) => (\n  <span className=\"lead\">\n    von{\" \"}\n    {R.intersperse(\", \")(\n      speakerList.map(speaker => (\n        <Link key={speaker.fields.slug} to={speaker.fields.slug}>\n          {speaker.frontmatter.name}\n        </Link>\n      ))\n    )}\n  </span>\n)\n\nconst LocationInfo = ({ location }) => {\n  const { frontmatter } = location\n\n  return (\n    <Link to={location.fields.slug}>\n      <address>\n        {frontmatter.name}\n        <br />\n        {frontmatter.info && (\n          <>\n            {frontmatter.info}\n            <br />\n          </>\n        )}\n        {`${frontmatter.street} ${frontmatter.number}`}\n        <br />\n        {`${frontmatter.zip} ${frontmatter.city}`}\n        <br />\n      </address>\n    </Link>\n  )\n}\n\nconst TagsLine = ({ tags }) => {\n  if (tags) {\n    return (\n      <>\n        {R.intersperse(\", \")(\n          tags.map(tag => (\n            <Link key={tag} to={`/tags/#${tag}`}>\n              <FontAwesomeIcon icon={faTag} /> {tag}\n            </Link>\n          ))\n        )}\n      </>\n    )\n  } else {\n    return null\n  }\n}\n\nconst Headline = ({ talk, linkToDetailsPage }) => {\n  if (linkToDetailsPage) {\n    return (\n      <h2>\n        <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\n      </h2>\n    )\n  } else {\n    return <h2>{talk.frontmatter.title}</h2>\n  }\n}\n\nconst TalkContent = ({ talk, speakerList, location, linkToDetailsPage }) => (\n  <>\n    <Headline talk={talk} linkToDetailsPage={linkToDetailsPage} />\n    <SpeakerHeadline speakerList={speakerList} /> | {formatDate(talk.frontmatter.date)}\n    <p>\n      <TagsLine tags={talk.frontmatter.tags} />\n    </p>\n    <article className=\"talk-content\">\n      <div dangerouslySetInnerHTML={{ __html: talk.html }} />\n\n      {talk.frontmatter.poster && (\n        <Link to={`/posters#${talk.frontmatter.poster.childImageSharp.id}`}>\n          <Img fluid={talk.frontmatter.poster.childImageSharp.fluid} />\n        </Link>\n      )}\n\n      <hr />\n\n      {speakerList.map(speaker => (\n        <SpeakerProfile key={speaker.id} speaker={speaker} />\n      ))}\n\n      <hr />\n\n      <div>\n        <p>\n          Datum: {formatDate(talk.frontmatter.date)}, {talk.frontmatter.time ?? \"19:00 Uhr\"}\n        </p>\n        {talk.frontmatter.virtual ? (\n          <>Das Treffen findet Online statt. Siehe Beschreibung.</>\n        ) : (\n          <>Ort: {location ? <LocationInfo location={location} /> : <span>wird noch bekannt gegeben</span>}</>\n        )}\n      </div>\n\n      <br />\n      <p>\n        Die Veranstaltung wird durch die <i>Java User Group GÃ¶rlitz</i> (im{\" \"}\n        <a href=\"http://www.ijug.eu/\">iJUG Verband</a>) organisiert.\n      </p>\n    </article>\n  </>\n)\n\nexport default TalkContent\n","import React from \"react\"\n\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nimport TalkContent from \"../components/talk-content\"\n\nconst TalkPage = ({ data }) => {\n  const { talk, speakers, location } = data\n\n  const speakerList = speakers.edges.map(edge => edge.node)\n\n  return (\n    <Layout>\n      <TalkContent talk={talk} speakerList={speakerList} location={location} linkToDetailsPage={false} />\n    </Layout>\n  )\n}\n\nexport default TalkPage\n\nexport const query = graphql`\n  query($slug: String!, $speakerSlugs: [String]!, $locationSlug: String!) {\n    talk: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date\n        time\n        virtual\n        tags\n        poster {\n          childImageSharp {\n            id\n            fluid {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(\n      filter: { fields: { slug: { in: $speakerSlugs } } }\n      sort: { fields: frontmatter___name, order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            name\n            pic {\n              childImageSharp {\n                fluid(maxWidth: 400) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            twitter_name\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    location: markdownRemark(fields: { slug: { eq: $locationSlug } }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        name\n        number\n        info\n        zip\n        city\n        street\n      }\n    }\n  }\n`\n"],"sourceRoot":""}