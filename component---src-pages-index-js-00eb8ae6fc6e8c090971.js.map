{"version":3,"sources":["webpack:///./src/utils/get-upcoming-event.js","webpack:///./src/pages/index.js","webpack:///./src/components/speaker-profile.js","webpack:///./src/components/talk-content.js"],"names":["getUpcomingEvent","allEvents","extractDate","today","extractor","edge","frontmatter","date","sortedEvents","R","length","todayMoment","moment","startOf","datesAfter","event","isSameOrBefore","PostPage","post","to","fields","slug","title","formatDate","dangerouslySetInnerHTML","__html","html","IndexPage","data","talks","edges","map","node","posts","sortedPosts","key","Date","upcomingEvent","speakers","locations","allSpeakers","allLocations","location","locationId","speakersOfTalk","findSpeakersForTalk","talk","speakerList","linkToDetailsPage","SpeakerProfile","speaker","Container","Row","pic","Col","sm","xs","style","textAlign","maxWidth","alt","fluid","childImageSharp","name","twitter_name","href","className","SpeakerHeadline","LocationInfo","info","street","number","zip","city","TagsLine","tags","tag","icon","faTag","Headline","TalkContent","poster","id","time","virtual"],"mappings":"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","file":"component---src-pages-index-js-00eb8ae6fc6e8c090971.js","sourcesContent":["import moment from \"moment/moment\"\r\nimport * as R from \"ramda\"\r\n\r\n/**\r\n * This function is used to determine the next upcoming event based on a list of events and the current date.\r\n * This is used to mark the next event in the list of all events and to determine which talk to show on the front page.\r\n *\r\n * If there is no event in the list the is in the future of today, then the last event is used.\r\n *\r\n *\r\n * @param allEvents a list of events\r\n * @param extractDate an optional function to extract the date from the event objects.\r\n * If no function is provided then a property \"frontmatter.date\" is used based on the markdown standard\r\n * @param today a date object of today. Usualy created by \"new Date()\" or a string representing today.\r\n * Basically anything that can parsed by moment.js\r\n */\r\nconst getUpcomingEvent = ({ allEvents, extractDate, today }) => {\r\n  if(!allEvents) {\r\n    return undefined\r\n  }\r\n\r\n  const extractor = extractDate ? extractDate : edge => edge.frontmatter.date\r\n\r\n  const sortedEvents = R.sortBy(extractor)(allEvents)\r\n\r\n  if(sortedEvents.length === 1) {\r\n    return sortedEvents[0]\r\n  }\r\n\r\n  const todayMoment = moment(today).startOf(\"day\")\r\n\r\n  const datesAfter = R.filter(event => {\r\n    const date = moment(extractor(event)).startOf(\"day\")\r\n\r\n    return todayMoment.isSameOrBefore(date)\r\n  })(sortedEvents)\r\n\r\n  if(datesAfter && datesAfter.length > 0) {\r\n    return datesAfter[0]\r\n  } else {\r\n    return R.reverse(sortedEvents)[0]\r\n  }\r\n}\r\n\r\nexport default getUpcomingEvent","import React from \"react\"\r\n\r\nimport * as R from \"ramda\"\r\n\r\nimport { graphql, Link } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport getUpcomingEvent from \"../utils/get-upcoming-event\"\r\nimport formatDate from \"../utils/format-date\"\r\nimport TalkContent from \"../components/talk-content\"\r\nimport findSpeakersForTalk from \"../utils/find-speakers-for-talk\"\r\n\r\nconst PostPage = ({ post }) => (\r\n  <div>\r\n    <h2>\r\n      <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\r\n    </h2>\r\n\r\n    {post.frontmatter.date && <p>{formatDate(post.frontmatter.date)}</p>}\r\n\r\n    <div dangerouslySetInnerHTML={{ __html: post.html }} />\r\n    <hr />\r\n  </div>\r\n)\r\n\r\nconst IndexPage = ({ data }) => {\r\n  const talks = data.talks.edges.map(edge => edge.node)\r\n  const posts = data.posts ? data.posts.edges.map(edge => edge.node) : []\r\n\r\n  if (posts.length > 0) {\r\n    const sortedPosts = R.sortWith([R.descend(post => post.frontmatter.date)])(posts)\r\n\r\n    return (\r\n      <Layout>\r\n        {sortedPosts.map(post => (\r\n          <PostPage key={post.fields.slug} post={post} />\r\n        ))}\r\n      </Layout>\r\n    )\r\n  } else {\r\n    const today = new Date()\r\n\r\n    const upcomingEvent = getUpcomingEvent({ allEvents: talks, today })\r\n\r\n    const { speakers, locations } = data\r\n\r\n    const allSpeakers = speakers.edges.map(edge => edge.node)\r\n    const allLocations = locations.edges.map(edge => edge.node)\r\n\r\n    const location = R.filter(location => location.fields.locationId === upcomingEvent.frontmatter.location)(\r\n      allLocations\r\n    )[0]\r\n    const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk: upcomingEvent })\r\n\r\n    return (\r\n      <Layout>\r\n        <TalkContent talk={upcomingEvent} speakerList={speakersOfTalk} location={location} linkToDetailsPage={true} />\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const query = graphql`\r\n  query {\r\n    talks: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"talks\" } } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            title\r\n            date\r\n            time\r\n            speaker\r\n            location\r\n            virtual\r\n            poster {\r\n              childImageSharp {\r\n                id\r\n                fluid {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            tags\r\n          }\r\n          fields {\r\n            slug\r\n            sourceName\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    posts: allMarkdownRemark(\r\n      filter: { fields: { sourceName: { eq: \"posts\" } }, frontmatter: { show_on_frontpage: { eq: true } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            title\r\n            date\r\n            show_on_frontpage\r\n          }\r\n          fields {\r\n            slug\r\n            sourceName\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            name\r\n            pic {\r\n              childImageSharp {\r\n                fluid {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            twitter_name\r\n          }\r\n          fields {\r\n            slug\r\n            speakerId\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    locations: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"locations\" } } }) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            locationId\r\n          }\r\n          frontmatter {\r\n            name\r\n            number\r\n            info\r\n            zip\r\n            city\r\n            street\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nimport Img from \"gatsby-image\"\r\n\r\nimport { Container, Col, Row } from \"reactstrap\"\r\n\r\nconst SpeakerProfile = ({ speaker }) => {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {speaker.frontmatter.pic && (\r\n          <Col sm=\"6\" xs=\"12\" style={{textAlign: \"center\", maxWidth: \"400px\"}}>\r\n            <Link to={speaker.fields.slug}>\r\n              <Img alt=\"speaker\" fluid={speaker.frontmatter.pic.childImageSharp.fluid} />\r\n            </Link>\r\n          </Col>\r\n        )}\r\n\r\n        <Col sm=\"6\" xs=\"12\">\r\n          <div>\r\n            <p>\r\n              <Link to={speaker.fields.slug}>\r\n                <strong>{speaker.frontmatter.name}</strong>\r\n              </Link>\r\n            </p>\r\n\r\n            {speaker.frontmatter.twitter_name && (\r\n              <p>\r\n                Twitter:{\" \"}\r\n                <a href={`https://twitter.com/${speaker.frontmatter.twitter_name}`}>{`@${\r\n                  speaker.frontmatter.twitter_name\r\n                }`}</a>\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"description\" dangerouslySetInnerHTML={{ __html: speaker.html }} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SpeakerProfile\r\n","import React from \"react\"\r\nimport formatDate from \"../utils/format-date\"\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nimport { Link } from \"gatsby\"\r\n\r\nimport * as R from \"ramda\"\r\nimport SpeakerProfile from \"./speaker-profile\"\r\n\r\nimport Img from \"gatsby-image\"\r\n\r\nconst SpeakerHeadline = ({ speakerList }) => (\r\n  <span className=\"lead\">\r\n    von{\" \"}\r\n    {R.intersperse(\", \")(\r\n      speakerList.map(speaker => (\r\n        <Link key={speaker.fields.slug} to={speaker.fields.slug}>\r\n          {speaker.frontmatter.name}\r\n        </Link>\r\n      ))\r\n    )}\r\n  </span>\r\n)\r\n\r\nconst LocationInfo = ({ location }) => {\r\n  const { frontmatter } = location\r\n\r\n  return (\r\n    <Link to={location.fields.slug}>\r\n      <address>\r\n        {frontmatter.name}\r\n        <br />\r\n        {frontmatter.info && (\r\n          <>\r\n            {frontmatter.info}\r\n            <br />\r\n          </>\r\n        )}\r\n        {`${frontmatter.street} ${frontmatter.number}`}\r\n        <br />\r\n        {`${frontmatter.zip} ${frontmatter.city}`}\r\n        <br />\r\n      </address>\r\n    </Link>\r\n  )\r\n}\r\n\r\nconst TagsLine = ({ tags }) => {\r\n  if (tags) {\r\n    return (\r\n      <>\r\n        {R.intersperse(\", \")(\r\n          tags.map(tag => (\r\n            <Link key={tag} to={`/tags/#${tag}`}>\r\n              <FontAwesomeIcon icon={faTag} /> {tag}\r\n            </Link>\r\n          ))\r\n        )}\r\n      </>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nconst Headline = ({ talk, linkToDetailsPage }) => {\r\n  if (linkToDetailsPage) {\r\n    return (\r\n      <h2>\r\n        <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\r\n      </h2>\r\n    )\r\n  } else {\r\n    return <h2>{talk.frontmatter.title}</h2>\r\n  }\r\n}\r\n\r\nconst TalkContent = ({ talk, speakerList, location, linkToDetailsPage }) => (\r\n  <>\r\n    <Headline talk={talk} linkToDetailsPage={linkToDetailsPage} />\r\n    <SpeakerHeadline speakerList={speakerList} /> | {formatDate(talk.frontmatter.date)}\r\n    <p>\r\n      <TagsLine tags={talk.frontmatter.tags} />\r\n    </p>\r\n    <article className=\"talk-content\">\r\n      <div dangerouslySetInnerHTML={{ __html: talk.html }} />\r\n\r\n      {talk.frontmatter.poster && (\r\n        <Link to={`/posters#${talk.frontmatter.poster.childImageSharp.id}`}>\r\n          <Img fluid={talk.frontmatter.poster.childImageSharp.fluid} />\r\n        </Link>\r\n      )}\r\n\r\n      <hr />\r\n\r\n      {speakerList.map(speaker => (\r\n        <SpeakerProfile key={speaker.id} speaker={speaker} />\r\n      ))}\r\n\r\n      <hr />\r\n\r\n      <div>\r\n        <p>\r\n          Datum: {formatDate(talk.frontmatter.date)}, {talk.frontmatter.time ?? \"19:00 Uhr\"}\r\n        </p>\r\n        {talk.frontmatter.virtual ? (\r\n          <>Das Treffen findet Online statt. Siehe Beschreibung.</>\r\n        ) : (\r\n          <>Ort: {location ? <LocationInfo location={location} /> : <span>wird noch bekannt gegeben</span>}</>\r\n        )}\r\n      </div>\r\n\r\n      <br />\r\n      <p>\r\n        Die Veranstaltung wird durch die <i>Java User Group Görlitz</i> (im{\" \"}\r\n        <a href=\"http://www.ijug.eu/\">iJUG Verband</a>) organisiert.\r\n      </p>\r\n    </article>\r\n  </>\r\n)\r\n\r\nexport default TalkContent\r\n"],"sourceRoot":""}