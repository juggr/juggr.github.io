{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/ramda/es/internal/_isPlaceholder.js","webpack:///./node_modules/ramda/es/internal/_curry1.js","webpack:///./node_modules/ramda/es/always.js","webpack:///./node_modules/ramda/es/internal/_curry2.js","webpack:///./node_modules/ramda/es/add.js","webpack:///./node_modules/ramda/es/internal/_concat.js","webpack:///./node_modules/ramda/es/internal/_arity.js","webpack:///./node_modules/ramda/es/internal/_curryN.js","webpack:///./node_modules/ramda/es/curryN.js","webpack:///./node_modules/ramda/es/internal/_curry3.js","webpack:///./node_modules/ramda/es/adjust.js","webpack:///./node_modules/ramda/es/internal/_isArray.js","webpack:///./node_modules/ramda/es/internal/_dispatchable.js","webpack:///./node_modules/ramda/es/internal/_isTransformer.js","webpack:///./node_modules/ramda/es/internal/_reduced.js","webpack:///./node_modules/ramda/es/internal/_xfBase.js","webpack:///./node_modules/ramda/es/max.js","webpack:///./node_modules/ramda/es/internal/_map.js","webpack:///./node_modules/ramda/es/internal/_isString.js","webpack:///./node_modules/ramda/es/internal/_isArrayLike.js","webpack:///./node_modules/ramda/es/internal/_xwrap.js","webpack:///./node_modules/ramda/es/bind.js","webpack:///./node_modules/ramda/es/internal/_reduce.js","webpack:///./node_modules/ramda/es/internal/_xmap.js","webpack:///./node_modules/ramda/es/internal/_has.js","webpack:///./node_modules/ramda/es/internal/_isArguments.js","webpack:///./node_modules/ramda/es/keys.js","webpack:///./node_modules/ramda/es/map.js","webpack:///./node_modules/ramda/es/path.js","webpack:///./node_modules/ramda/es/prop.js","webpack:///./node_modules/ramda/es/pluck.js","webpack:///./node_modules/ramda/es/reduce.js","webpack:///./node_modules/ramda/es/and.js","webpack:///./node_modules/ramda/es/internal/_xany.js","webpack:///./node_modules/ramda/es/any.js","webpack:///./node_modules/ramda/es/ap.js","webpack:///./node_modules/ramda/es/apply.js","webpack:///./node_modules/ramda/es/values.js","webpack:///./node_modules/ramda/es/ascend.js","webpack:///./node_modules/ramda/es/assoc.js","webpack:///./node_modules/ramda/es/internal/_isInteger.js","webpack:///./node_modules/ramda/es/isNil.js","webpack:///./node_modules/ramda/es/assocPath.js","webpack:///./node_modules/ramda/es/nAry.js","webpack:///./node_modules/ramda/es/internal/_isFunction.js","webpack:///./node_modules/ramda/es/liftN.js","webpack:///./node_modules/ramda/es/lift.js","webpack:///./node_modules/ramda/es/curry.js","webpack:///./node_modules/ramda/es/internal/_flatCat.js","webpack:///./node_modules/ramda/es/chain.js","webpack:///./node_modules/ramda/es/internal/_xchain.js","webpack:///./node_modules/ramda/es/internal/_forceReduced.js","webpack:///./node_modules/ramda/es/internal/_makeFlat.js","webpack:///./node_modules/ramda/es/type.js","webpack:///./node_modules/ramda/es/not.js","webpack:///./node_modules/ramda/es/internal/_pipe.js","webpack:///./node_modules/ramda/es/internal/_checkForMethod.js","webpack:///./node_modules/ramda/es/slice.js","webpack:///./node_modules/ramda/es/tail.js","webpack:///./node_modules/ramda/es/pipe.js","webpack:///./node_modules/ramda/es/reverse.js","webpack:///./node_modules/ramda/es/compose.js","webpack:///./node_modules/ramda/es/composeK.js","webpack:///./node_modules/ramda/es/internal/_pipeP.js","webpack:///./node_modules/ramda/es/pipeP.js","webpack:///./node_modules/ramda/es/internal/_arrayFromIterator.js","webpack:///./node_modules/ramda/es/internal/_containsWith.js","webpack:///./node_modules/ramda/es/identical.js","webpack:///./node_modules/ramda/es/internal/_equals.js","webpack:///./node_modules/ramda/es/internal/_functionName.js","webpack:///./node_modules/ramda/es/equals.js","webpack:///./node_modules/ramda/es/internal/_contains.js","webpack:///./node_modules/ramda/es/internal/_indexOf.js","webpack:///./node_modules/ramda/es/internal/_quote.js","webpack:///./node_modules/ramda/es/internal/_toISOString.js","webpack:///./node_modules/ramda/es/internal/_filter.js","webpack:///./node_modules/ramda/es/internal/_isObject.js","webpack:///./node_modules/ramda/es/internal/_xfilter.js","webpack:///./node_modules/ramda/es/filter.js","webpack:///./node_modules/ramda/es/reject.js","webpack:///./node_modules/ramda/es/internal/_complement.js","webpack:///./node_modules/ramda/es/toString.js","webpack:///./node_modules/ramda/es/internal/_toString.js","webpack:///./node_modules/ramda/es/concat.js","webpack:///./node_modules/ramda/es/constructN.js","webpack:///./node_modules/ramda/es/converge.js","webpack:///./node_modules/ramda/es/internal/_xreduceBy.js","webpack:///./node_modules/ramda/es/reduceBy.js","webpack:///./node_modules/ramda/es/defaultTo.js","webpack:///./node_modules/ramda/es/descend.js","webpack:///./node_modules/ramda/es/difference.js","webpack:///./node_modules/ramda/es/differenceWith.js","webpack:///./node_modules/ramda/es/dissoc.js","webpack:///./node_modules/ramda/es/remove.js","webpack:///./node_modules/ramda/es/update.js","webpack:///./node_modules/ramda/es/internal/_xdrop.js","webpack:///./node_modules/ramda/es/drop.js","webpack:///./node_modules/ramda/es/internal/_xtake.js","webpack:///./node_modules/ramda/es/take.js","webpack:///./node_modules/ramda/es/internal/_xdropRepeatsWith.js","webpack:///./node_modules/ramda/es/nth.js","webpack:///./node_modules/ramda/es/last.js","webpack:///./node_modules/ramda/es/dropRepeatsWith.js","webpack:///./node_modules/ramda/es/or.js","webpack:///./node_modules/ramda/es/empty.js","webpack:///./node_modules/ramda/es/takeLast.js","webpack:///./node_modules/ramda/es/flip.js","webpack:///./node_modules/ramda/es/identity.js","webpack:///./node_modules/ramda/es/internal/_identity.js","webpack:///./node_modules/ramda/es/innerJoin.js","webpack:///./node_modules/ramda/es/internal/_Set.js","webpack:///./node_modules/ramda/es/uniqBy.js","webpack:///./node_modules/ramda/es/uniq.js","webpack:///./node_modules/ramda/es/intersperse.js","webpack:///./node_modules/ramda/es/objOf.js","webpack:///./node_modules/ramda/es/internal/_assign.js","webpack:///./node_modules/ramda/es/internal/_stepCat.js","webpack:///./node_modules/ramda/es/into.js","webpack:///./node_modules/ramda/es/invoker.js","webpack:///./node_modules/ramda/es/is.js","webpack:///./node_modules/ramda/es/join.js","webpack:///./node_modules/ramda/es/juxt.js","webpack:///./node_modules/ramda/es/length.js","webpack:///./node_modules/ramda/es/internal/_isNumber.js","webpack:///./node_modules/ramda/es/lens.js","webpack:///./node_modules/ramda/es/sum.js","webpack:///./node_modules/ramda/es/mean.js","webpack:///./node_modules/ramda/es/memoizeWith.js","webpack:///./node_modules/ramda/es/mergeWithKey.js","webpack:///./node_modules/ramda/es/mergeDeepWithKey.js","webpack:///./node_modules/ramda/es/multiply.js","webpack:///./node_modules/ramda/es/over.js","webpack:///./node_modules/ramda/es/pickAll.js","webpack:///./node_modules/ramda/es/prepend.js","webpack:///./node_modules/ramda/es/useWith.js","webpack:///./node_modules/ramda/es/reduceRight.js","webpack:///./node_modules/ramda/es/times.js","webpack:///./node_modules/ramda/es/sequence.js","webpack:///./node_modules/ramda/es/sortBy.js","webpack:///./node_modules/ramda/es/sortWith.js","webpack:///./node_modules/ramda/es/uniqWith.js","webpack:///./node_modules/ramda/es/trim.js","webpack:///./node_modules/ramda/es/where.js"],"names":["dP","__webpack_require__","f","FProto","Function","prototype","nameRE","configurable","get","this","match","e","239","n","t","r","_isPlaceholder","a","_curry1","fn","f1","arguments","length","apply","es_always","val","_curry2","f2","b","_b","_a","es_add","Number","_concat","set1","set2","idx","len1","len2","result","_arity","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","Error","_curryN","received","combined","argsIdx","left","combinedIdx","es_curryN","_curry3","f3","c","_c","es_adjust","list","_idx","_list","_isArray","Array","isArray","Object","toString","call","_dispatchable","methodNames","xf","args","slice","obj","pop","_isTransformer","_reduced","x","@@transducer/value","@@transducer/reduced","_xfBase","init","es_max","_map","functor","len","_isString","internal_isArrayLike","nodeType","hasOwnProperty","XWrap","acc","es_bind","thisObj","_iterableReduce","iter","step","next","done","value","_methodReduce","methodName","symIterator","Symbol","iterator","_reduce","_xwrap","reduce","TypeError","_xmap_XMap","XMap","input","internal_xmap","_has","prop","_isArguments_toString","internal_isArguments","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","hasArgsEnumBug","contains","item","es_keys","keys","nIdx","ks","checkArgsLength","es_map","key","es_path","paths","es_prop","p","es_pluck","es_reduce","es_and","_xany_XAny","XAny","any","es_any","es_ap","applyF","applyX","ap","es_apply","es_values","props","vals","es_ascend","aa","bb","es_assoc","_isInteger","isInteger","es_isNil","es_assocPath","assocPath","path","nextObj","arr","concat","es_nAry","_isFunction","es_liftN","arity","lifted","es_lift","es_curry","es_chain","rxf","@@transducer/init","@@transducer/result","@@transducer/step","ret","internal_flatCat","monad","recursive","flatt","jlen","j","ilen","_makeFlat","es_type","es_not","_pipe","g","_checkForMethod","methodname","es_slice","fromIndex","toIndex","es_tail","Infinity","pipe","es_reverse","split","reverse","join","compose","composeK","last","_pipeP","ctx","then","pipeP","_arrayFromIterator","push","_containsWith","pred","es_identical","_uniqContentEquals","aIterator","bIterator","stackA","stackB","eq","_equals","aItem","typeA","equals","constructor","String","valueOf","name","message","source","global","ignoreCase","multiline","sticky","unicode","size","entries","values","keysA","extendedStackA","extendedStackB","es_equals","_contains","inf","indexOf","_indexOf","_quote","s","replace","pad","internal_toISOString","Date","toISOString","d","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","_filter","_isObject","_xfilter_XFilter","XFilter","es_filter","filterable","es_reject","_complement","es_toString","_toString","seen","recur","y","xs","mapPairs","k","sort","test","isNaN","NaN","repr","es_concat","es_constructN","Fn","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","es_converge","after","fns","context","_xreduceBy_XReduceBy","XReduceBy","valueFn","valueAcc","keyFn","inputs","es_reduceBy","elt","es_defaultTo","v","es_descend","es_difference","first","second","out","firstLen","es_differenceWith","es_dissoc","es_remove","start","count","splice","es_update","_xdrop_XDrop","XDrop","es_drop","Math","max","_xtake_XTake","XTake","i","es_take","_xdropRepeatsWith_XDropRepeatsWith","XDropRepeatsWith","lastValue","seenFirstValue","sameAsLast","internal_xdropRepeatsWith","es_nth","offset","charAt","es_last","es_dropRepeatsWith","es_or","es_empty","empty","es_takeLast","es_flip","es_identity","es_innerJoin","ys","hasOrAdd","shouldAdd","set","prevSize","type","_items","_nativeSet","add","has","bIdx","null","internal_Set","_Set","Set","es_uniqBy","appliedItem","es_uniq","es_intersperse","separator","es_objOf","assign","es_invoker","method","target","es_is","Ctor","es_join","es_juxt","es_length","_isNumber","es_lens","getter","setter","toFunctorFn","focus","es_sum","es_mean","es_memoizeWith","mFn","cache","es_mergeWithKey","l","es_mergeDeepWithKey","mergeDeepWithKey","lObj","rObj","lVal","rVal","es_multiply","Identity","map","es_over","lens","es_pickAll","names","es_prepend","el","es_useWith","transformers","es_reduceRight","es_times","RangeError","es_sequence","of","traversable","sequence","es_sortBy","es_sortWith","es_uniqWith","trim","es_where","spec","testObj","K","X","Y","Z","G","Q","rn","_","ln","wn","jn","Rn","Jn","Hn","Wn","Xn","Yn","Zn","$n","tt","ft","st","qn","Vn","dt","xn","ht","yt","wt","Ot","At","tn","_t","xt","V","ct","Nt","qt","cn","on","B","Ft","Tt","Ut","Ct","It","en","pn","ot","St","at","Pt","M","Dt","mn","On","J","Vt","R","H","Ln","Mt","Bn","Gn","bn","Jt","gn","Ht","Kt","kt","vn","et","lt","Rt","Mn","dn","bt","mt","Wt","Qn","Bt","$","Xt"],"mappings":"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","file":"1-051521ad02f9147f1324.js","sourcesContent":["var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","export default function _isPlaceholder(a) {\n       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from './_isPlaceholder';\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from './internal/_curry1';\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = /*#__PURE__*/_curry1(function always(val) {\n  return function () {\n    return val;\n  };\n});\nexport default always;","import _curry1 from './_curry1';\nimport _isPlaceholder from './_isPlaceholder';\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _curry2 from './internal/_curry2';\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nvar add = /*#__PURE__*/_curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\nexport default add;","/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nexport default function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n}","export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}","import _arity from './_arity';\nimport _isPlaceholder from './_isPlaceholder';\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","import _arity from './internal/_arity';\nimport _curry1 from './internal/_curry1';\nimport _curry2 from './internal/_curry2';\nimport _curryN from './internal/_curryN';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;","import _curry1 from './_curry1';\nimport _curry2 from './_curry2';\nimport _isPlaceholder from './_isPlaceholder';\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _curry1(function (_c) {\n          return fn(a, b, _c);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n          return fn(_a, _b, c);\n        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b, c);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b, c);\n        }) : _isPlaceholder(c) ? _curry1(function (_c) {\n          return fn(a, b, _c);\n        }) : fn(a, b, c);\n    }\n  };\n}","import _concat from './internal/_concat';\nimport _curry3 from './internal/_curry3';\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a -> a) -> Number -> [a] -> [a]\n * @param {Function} fn The function to apply.\n * @param {Number} idx The index.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]\n * @symb R.adjust(f, 0, [a, b]) = [f(a), b]\n */\nvar adjust = /*#__PURE__*/_curry3(function adjust(fn, idx, list) {\n  if (idx >= list.length || idx < -list.length) {\n    return list;\n  }\n  var start = idx < 0 ? list.length : 0;\n  var _idx = start + idx;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\nexport default adjust;","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n};","import _isArray from './_isArray';\nimport _isTransformer from './_isTransformer';\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}","export default function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n}","export default function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x : {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}","export default {\n  init: function () {\n    return this.xf['@@transducer/init']();\n  },\n  result: function (result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};","import _curry2 from './internal/_curry2';\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nvar max = /*#__PURE__*/_curry2(function max(a, b) {\n  return b > a ? b : a;\n});\nexport default max;","export default function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n}","export default function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}","import _curry1 from './_curry1';\nimport _isArray from './_isArray';\nimport _isString from './_isString';\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nvar _isArrayLike = /*#__PURE__*/_curry1(function isArrayLike(x) {\n  if (_isArray(x)) {\n    return true;\n  }\n  if (!x) {\n    return false;\n  }\n  if (typeof x !== 'object') {\n    return false;\n  }\n  if (_isString(x)) {\n    return false;\n  }\n  if (x.nodeType === 1) {\n    return !!x.length;\n  }\n  if (x.length === 0) {\n    return true;\n  }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\nexport default _isArrayLike;","var XWrap = /*#__PURE__*/function () {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function () {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function (acc) {\n    return acc;\n  };\n  XWrap.prototype['@@transducer/step'] = function (acc, x) {\n    return this.f(acc, x);\n  };\n\n  return XWrap;\n}();\n\nexport default function _xwrap(fn) {\n  return new XWrap(fn);\n}","import _arity from './internal/_arity';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nvar bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function () {\n    return fn.apply(thisObj, arguments);\n  });\n});\nexport default bind;","import _isArrayLike from './_isArrayLike';\nimport _xwrap from './_xwrap';\nimport bind from '../bind';\n\nfunction _arrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx += 1;\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _iterableReduce(xf, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    step = iter.next();\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _methodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n}\n\nvar symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n\nexport default function _reduce(fn, acc, list) {\n  if (typeof fn === 'function') {\n    fn = _xwrap(fn);\n  }\n  if (_isArrayLike(list)) {\n    return _arrayReduce(fn, acc, list);\n  }\n  if (typeof list['fantasy-land/reduce'] === 'function') {\n    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');\n  }\n  if (list[symIterator] != null) {\n    return _iterableReduce(fn, acc, list[symIterator]());\n  }\n  if (typeof list.next === 'function') {\n    return _iterableReduce(fn, acc, list);\n  }\n  if (typeof list.reduce === 'function') {\n    return _methodReduce(fn, acc, list, 'reduce');\n  }\n\n  throw new TypeError('reduce: list must be array or iterable');\n}","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XMap = /*#__PURE__*/function () {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function (result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return XMap;\n}();\n\nvar _xmap = /*#__PURE__*/_curry2(function _xmap(f, xf) {\n  return new XMap(f, xf);\n});\nexport default _xmap;","export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","import _has from './_has';\n\nvar toString = Object.prototype.toString;\nvar _isArguments = function () {\n  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n};\n\nexport default _isArguments;","import _curry1 from './internal/_curry1';\nimport _has from './internal/_has';\nimport _isArguments from './internal/_isArguments';\n\n// cover IE < 9 keys issues\nvar hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n// Safari bug\nvar hasArgsEnumBug = /*#__PURE__*/function () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nvar _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n} : function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n  var prop, nIdx;\n  var ks = [];\n  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n      nIdx -= 1;\n    }\n  }\n  return ks;\n};\nvar keys = /*#__PURE__*/_curry1(_keys);\nexport default keys;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _map from './internal/_map';\nimport _reduce from './internal/_reduce';\nimport _xmap from './internal/_xmap';\nimport curryN from './curryN';\nimport keys from './keys';\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nvar map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\nexport default map;","import _curry2 from './internal/_curry2';\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nvar path = /*#__PURE__*/_curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\nexport default path;","import _curry2 from './internal/_curry2';\nimport path from './path';\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\n\nvar prop = /*#__PURE__*/_curry2(function prop(p, obj) {\n  return path([p], obj);\n});\nexport default prop;","import _curry2 from './internal/_curry2';\nimport map from './map';\nimport prop from './prop';\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = /*#__PURE__*/_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\nexport default pluck;","import _curry3 from './internal/_curry3';\nimport _reduce from './internal/_reduce';\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nvar reduce = /*#__PURE__*/_curry3(_reduce);\nexport default reduce;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if both arguments are `true`; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if it is falsy, otherwise the second argument.\n * @see R.both\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nvar and = /*#__PURE__*/_curry2(function and(a, b) {\n  return a && b;\n});\nexport default and;","import _curry2 from './_curry2';\nimport _reduced from './_reduced';\nimport _xfBase from './_xfBase';\n\nvar XAny = /*#__PURE__*/function () {\n  function XAny(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.any = false;\n  }\n  XAny.prototype['@@transducer/init'] = _xfBase.init;\n  XAny.prototype['@@transducer/result'] = function (result) {\n    if (!this.any) {\n      result = this.xf['@@transducer/step'](result, false);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAny.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f(input)) {\n      this.any = true;\n      result = _reduced(this.xf['@@transducer/step'](result, true));\n    }\n    return result;\n  };\n\n  return XAny;\n}();\n\nvar _xany = /*#__PURE__*/_curry2(function _xany(f, xf) {\n  return new XAny(f, xf);\n});\nexport default _xany;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xany from './internal/_xany';\n\n/**\n * Returns `true` if at least one of elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      var lessThan0 = R.flip(R.lt)(0);\n *      var lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */\nvar any = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}));\nexport default any;","import _concat from './internal/_concat';\nimport _curry2 from './internal/_curry2';\nimport _reduce from './internal/_reduce';\nimport map from './map';\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @sig (a -> b -> c) -> (a -> b) -> (a -> c)\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n *\n *      // R.ap can also be used as S combinator\n *      // when only two functions are passed\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nvar ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {\n  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {\n    return applyF(x)(applyX(x));\n  } :\n  // else\n  _reduce(function (acc, f) {\n    return _concat(acc, map(f, applyX));\n  }, [], applyF);\n});\nexport default ap;","import _curry2 from './internal/_curry2';\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = /*#__PURE__*/_curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nexport default apply;","import _curry1 from './internal/_curry1';\nimport keys from './keys';\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nvar values = /*#__PURE__*/_curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\nexport default values;","import _curry3 from './internal/_curry3';\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @see R.descend\n * @example\n *\n *      var byAge = R.ascend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByYoungestFirst = R.sort(byAge, people);\n */\nvar ascend = /*#__PURE__*/_curry3(function ascend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa < bb ? -1 : aa > bb ? 1 : 0;\n});\nexport default ascend;","import _curry3 from './internal/_curry3';\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig String -> a -> {k: v} -> {k: v}\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nvar assoc = /*#__PURE__*/_curry3(function assoc(prop, val, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n});\nexport default assoc;","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n};","import _curry1 from './internal/_curry1';\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nvar isNil = /*#__PURE__*/_curry1(function isNil(x) {\n  return x == null;\n});\nexport default isNil;","import _curry3 from './internal/_curry3';\nimport _has from './internal/_has';\nimport _isArray from './internal/_isArray';\nimport _isInteger from './internal/_isInteger';\nimport assoc from './assoc';\nimport isNil from './isNil';\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */\nvar assocPath = /*#__PURE__*/_curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n  var idx = path[0];\n  if (path.length > 1) {\n    var nextObj = !isNil(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n  if (_isInteger(idx) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[idx] = val;\n    return arr;\n  } else {\n    return assoc(idx, val, obj);\n  }\n});\nexport default assocPath;","import _curry2 from './internal/_curry2';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      var takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nvar nAry = /*#__PURE__*/_curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.call(this);\n      };\n    case 1:\n      return function (a0) {\n        return fn.call(this, a0);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.call(this, a0, a1);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.call(this, a0, a1, a2);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.call(this, a0, a1, a2, a3);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.call(this, a0, a1, a2, a3, a4);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n      };\n    default:\n      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\nexport default nAry;","export default function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n}","import _curry2 from './internal/_curry2';\nimport _reduce from './internal/_reduce';\nimport ap from './ap';\nimport curryN from './curryN';\nimport map from './map';\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      var madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nvar liftN = /*#__PURE__*/_curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function () {\n    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\nexport default liftN;","import _curry1 from './internal/_curry1';\nimport liftN from './liftN';\n\n/**\n * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      var madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n *\n *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n */\nvar lift = /*#__PURE__*/_curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\nexport default lift;","import _curry1 from './internal/_curry1';\nimport curryN from './curryN';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;","import _forceReduced from './_forceReduced';\nimport _isArrayLike from './_isArrayLike';\nimport _reduce from './_reduce';\nimport _xfBase from './_xfBase';\n\nvar preservingReduced = function (xf) {\n  return {\n    '@@transducer/init': _xfBase.init,\n    '@@transducer/result': function (result) {\n      return xf['@@transducer/result'](result);\n    },\n    '@@transducer/step': function (result, input) {\n      var ret = xf['@@transducer/step'](result, input);\n      return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n    }\n  };\n};\n\nvar _flatCat = function _xcat(xf) {\n  var rxf = preservingReduced(xf);\n  return {\n    '@@transducer/init': _xfBase.init,\n    '@@transducer/result': function (result) {\n      return rxf['@@transducer/result'](result);\n    },\n    '@@transducer/step': function (result, input) {\n      return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n    }\n  };\n};\n\nexport default _flatCat;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _makeFlat from './internal/_makeFlat';\nimport _xchain from './internal/_xchain';\nimport map from './map';\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\nexport default chain;","import _curry2 from './_curry2';\nimport _flatCat from './_flatCat';\nimport map from '../map';\n\nvar _xchain = /*#__PURE__*/_curry2(function _xchain(f, xf) {\n  return map(f, _flatCat(xf));\n});\nexport default _xchain;","export default function _forceReduced(x) {\n  return {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}","import _isArrayLike from './_isArrayLike';\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nexport default function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}","import _curry1 from './internal/_curry1';\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(undefined); //=> \"Undefined\"\n */\nvar type = /*#__PURE__*/_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\nexport default type;","import _curry1 from './internal/_curry1';\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nvar not = /*#__PURE__*/_curry1(function not(a) {\n  return !a;\n});\nexport default not;","export default function _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}","import _isArray from './_isArray';\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}","import _checkForMethod from './internal/_checkForMethod';\nimport _curry3 from './internal/_curry3';\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nvar slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\nexport default slice;","import _checkForMethod from './internal/_checkForMethod';\nimport _curry1 from './internal/_curry1';\nimport slice from './slice';\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));\nexport default tail;","import _arity from './internal/_arity';\nimport _pipe from './internal/_pipe';\nimport reduce from './reduce';\nimport tail from './tail';\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nexport default function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}","import _curry1 from './internal/_curry1';\nimport _isString from './internal/_isString';\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nvar reverse = /*#__PURE__*/_curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();\n});\nexport default reverse;","import pipe from './pipe';\nimport reverse from './reverse';\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nexport default function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n}","import chain from './chain';\nimport compose from './compose';\nimport map from './map';\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       var get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       var getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\nexport default function composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n}","export default function _pipeP(f, g) {\n  return function () {\n    var ctx = this;\n    return f.apply(ctx, arguments).then(function (x) {\n      return g.call(ctx, x);\n    });\n  };\n}","import _arity from './internal/_arity';\nimport _pipeP from './internal/_pipeP';\nimport reduce from './reduce';\nimport tail from './tail';\n\n/**\n * Performs left-to-right composition of one or more Promise-returning\n * functions. The leftmost function may have any arity; the remaining functions\n * must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeP\n * @example\n *\n *      //  followersForUser :: String -> Promise [User]\n *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n */\nexport default function pipeP() {\n  if (arguments.length === 0) {\n    throw new Error('pipeP requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n}","export default function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n}","export default function _containsWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}","import _curry2 from './internal/_curry2';\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nvar identical = /*#__PURE__*/_curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\nexport default identical;","import _arrayFromIterator from './_arrayFromIterator';\nimport _containsWith from './_containsWith';\nimport _functionName from './_functionName';\nimport _has from './_has';\nimport identical from '../identical';\nimport keys from '../keys';\nimport type from '../type';\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparision of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n  var b = _arrayFromIterator(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  }\n\n  // if *a* array contains any element that is not included in *b*\n  return !_containsWith(function (b, aItem) {\n    return !_containsWith(eq, aItem, b);\n  }, b, a);\n}\n\nexport default function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  var typeA = type(a);\n\n  if (typeA !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  return true;\n}","export default function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}","import _curry2 from './internal/_curry2';\nimport _equals from './internal/_equals';\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nexport default equals;","import _indexOf from './_indexOf';\n\nexport default function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}","import equals from '../equals';\n\nexport default function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}","export default function _quote(s) {\n  var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b') // \\b matches word boundary; [\\b] matches backspace\n  .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n}","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) {\n  return (n < 10 ? '0' : '') + n;\n};\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n  return d.toISOString();\n} : function _toISOString(d) {\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n};\n\nexport default _toISOString;","export default function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n}","export default function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XFilter = /*#__PURE__*/function () {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return XFilter;\n}();\n\nvar _xfilter = /*#__PURE__*/_curry2(function _xfilter(f, xf) {\n  return new XFilter(f, xf);\n});\nexport default _xfilter;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _filter from './internal/_filter';\nimport _isObject from './internal/_isObject';\nimport _reduce from './internal/_reduce';\nimport _xfilter from './internal/_xfilter';\nimport keys from './keys';\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar filter = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['filter'], _xfilter, function (pred, filterable) {\n  return _isObject(filterable) ? _reduce(function (acc, key) {\n    if (pred(filterable[key])) {\n      acc[key] = filterable[key];\n    }\n    return acc;\n  }, {}, keys(filterable)) :\n  // else\n  _filter(pred, filterable);\n}));\nexport default filter;","import _complement from './internal/_complement';\nimport _curry2 from './internal/_curry2';\nimport filter from './filter';\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar reject = /*#__PURE__*/_curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\nexport default reject;","export default function _complement(f) {\n  return function () {\n    return !f.apply(this, arguments);\n  };\n}","import _curry1 from './internal/_curry1';\nimport _toString from './internal/_toString';\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString = /*#__PURE__*/_curry1(function toString(val) {\n  return _toString(val, []);\n});\nexport default toString;","import _contains from './_contains';\nimport _map from './_map';\nimport _quote from './_quote';\nimport _toISOString from './_toISOString';\nimport keys from '../keys';\nimport reject from '../reject';\n\nexport default function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function (obj, keys) {\n    return _map(function (k) {\n      return _quote(k) + ': ' + recur(obj[k]);\n    }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n        return (/^\\d+$/.test(k)\n        );\n      }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n}","import _curry2 from './internal/_curry2';\nimport _isArray from './internal/_isArray';\nimport _isFunction from './internal/_isFunction';\nimport _isString from './internal/_isString';\nimport toString from './toString';\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nvar concat = /*#__PURE__*/_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\nexport default concat;","import _curry2 from './internal/_curry2';\nimport curry from './curry';\nimport nAry from './nAry';\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      }\n *\n *      Salad.prototype.recipe = function() {\n *        var instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\n *        return R.join('\\n', instructions);\n *      };\n *\n *      var ThreeLayerSalad = R.constructN(3, Salad);\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\n *\n *      console.log(salad.recipe());\n *      // Add a dollop of Mayonnaise\n *      // Add a dollop of Potato Chips\n *      // Add a dollop of Ketchup\n */\nvar constructN = /*#__PURE__*/_curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n  if (n === 0) {\n    return function () {\n      return new Fn();\n    };\n  }\n  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (arguments.length) {\n      case 1:\n        return new Fn($0);\n      case 2:\n        return new Fn($0, $1);\n      case 3:\n        return new Fn($0, $1, $2);\n      case 4:\n        return new Fn($0, $1, $2, $3);\n      case 5:\n        return new Fn($0, $1, $2, $3, $4);\n      case 6:\n        return new Fn($0, $1, $2, $3, $4, $5);\n      case 7:\n        return new Fn($0, $1, $2, $3, $4, $5, $6);\n      case 8:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n      case 9:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n      case 10:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\nexport default constructN;","import _curry2 from './internal/_curry2';\nimport _map from './internal/_map';\nimport curryN from './curryN';\nimport max from './max';\nimport pluck from './pluck';\nimport reduce from './reduce';\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. When invoked, this new function is applied to some\n * arguments, each branching function is applied to those same arguments. The\n * results of each branching function are passed as arguments to the converging\n * function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      var average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nvar converge = /*#__PURE__*/_curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function () {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function (fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\nexport default converge;","import _curryN from './_curryN';\nimport _has from './_has';\nimport _xfBase from './_xfBase';\n\nvar XReduceBy = /*#__PURE__*/function () {\n  function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n    this.valueFn = valueFn;\n    this.valueAcc = valueAcc;\n    this.keyFn = keyFn;\n    this.xf = xf;\n    this.inputs = {};\n  }\n  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n  XReduceBy.prototype['@@transducer/result'] = function (result) {\n    var key;\n    for (key in this.inputs) {\n      if (_has(key, this.inputs)) {\n        result = this.xf['@@transducer/step'](result, this.inputs[key]);\n        if (result['@@transducer/reduced']) {\n          result = result['@@transducer/value'];\n          break;\n        }\n      }\n    }\n    this.inputs = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XReduceBy.prototype['@@transducer/step'] = function (result, input) {\n    var key = this.keyFn(input);\n    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];\n    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n    return result;\n  };\n\n  return XReduceBy;\n}();\n\nvar _xreduceBy = /*#__PURE__*/_curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n  return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n});\nexport default _xreduceBy;","import _curryN from './internal/_curryN';\nimport _dispatchable from './internal/_dispatchable';\nimport _has from './internal/_has';\nimport _reduce from './internal/_reduce';\nimport _xreduceBy from './internal/_xreduceBy';\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce\n * @example\n *\n *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n *      var namesByGrade = reduceToNamesBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Lucy', score: 92},\n *                      {name: 'Drew', score: 85},\n *                      // ...\n *                      {name: 'Bart', score: 62}];\n *      namesByGrade(students);\n *      // {\n *      //   'A': ['Lucy'],\n *      //   'B': ['Drew']\n *      //   // ...,\n *      //   'F': ['Bart']\n *      // }\n */\nvar reduceBy = /*#__PURE__*/_curryN(4, [], /*#__PURE__*/_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n  return _reduce(function (acc, elt) {\n    var key = keyFn(elt);\n    acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n    return acc;\n  }, {}, list);\n}));\nexport default reduceBy;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nvar defaultTo = /*#__PURE__*/_curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\nexport default defaultTo;","import _curry3 from './internal/_curry3';\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @see R.ascend\n * @example\n *\n *      var byAge = R.descend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByOldestFirst = R.sort(byAge, people);\n */\nvar descend = /*#__PURE__*/_curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\nexport default descend;","import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default difference;","import _containsWith from './internal/_containsWith';\nimport _curry3 from './internal/_curry3';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      var cmp = (x, y) => x.a === y.a;\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      var l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\nvar differenceWith = /*#__PURE__*/_curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default differenceWith;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */\nvar dissoc = /*#__PURE__*/_curry2(function dissoc(prop, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  delete result[prop];\n  return result;\n});\nexport default dissoc;","import _curry3 from './internal/_curry3';\n\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nvar remove = /*#__PURE__*/_curry3(function remove(start, count, list) {\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(start, count);\n  return result;\n});\nexport default remove;","import _curry3 from './internal/_curry3';\nimport adjust from './adjust';\nimport always from './always';\n\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */\nvar update = /*#__PURE__*/_curry3(function update(idx, x, list) {\n  return adjust(always(x), idx, list);\n});\nexport default update;","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XDrop = /*#__PURE__*/function () {\n  function XDrop(n, xf) {\n    this.xf = xf;\n    this.n = n;\n  }\n  XDrop.prototype['@@transducer/init'] = _xfBase.init;\n  XDrop.prototype['@@transducer/result'] = _xfBase.result;\n  XDrop.prototype['@@transducer/step'] = function (result, input) {\n    if (this.n > 0) {\n      this.n -= 1;\n      return result;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return XDrop;\n}();\n\nvar _xdrop = /*#__PURE__*/_curry2(function _xdrop(n, xf) {\n  return new XDrop(n, xf);\n});\nexport default _xdrop;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xdrop from './internal/_xdrop';\nimport slice from './slice';\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\nexport default drop;","import _curry2 from './_curry2';\nimport _reduced from './_reduced';\nimport _xfBase from './_xfBase';\n\nvar XTake = /*#__PURE__*/function () {\n  function XTake(n, xf) {\n    this.xf = xf;\n    this.n = n;\n    this.i = 0;\n  }\n  XTake.prototype['@@transducer/init'] = _xfBase.init;\n  XTake.prototype['@@transducer/result'] = _xfBase.result;\n  XTake.prototype['@@transducer/step'] = function (result, input) {\n    this.i += 1;\n    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n  };\n\n  return XTake;\n}();\n\nvar _xtake = /*#__PURE__*/_curry2(function _xtake(n, xf) {\n  return new XTake(n, xf);\n});\nexport default _xtake;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xtake from './internal/_xtake';\nimport slice from './slice';\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      var personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      var takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nvar take = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\nexport default take;","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XDropRepeatsWith = /*#__PURE__*/function () {\n  function XDropRepeatsWith(pred, xf) {\n    this.xf = xf;\n    this.pred = pred;\n    this.lastValue = undefined;\n    this.seenFirstValue = false;\n  }\n\n  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;\n  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;\n  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n    var sameAsLast = false;\n    if (!this.seenFirstValue) {\n      this.seenFirstValue = true;\n    } else if (this.pred(this.lastValue, input)) {\n      sameAsLast = true;\n    }\n    this.lastValue = input;\n    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n  };\n\n  return XDropRepeatsWith;\n}();\n\nvar _xdropRepeatsWith = /*#__PURE__*/_curry2(function _xdropRepeatsWith(pred, xf) {\n  return new XDropRepeatsWith(pred, xf);\n});\nexport default _xdropRepeatsWith;","import _curry2 from './internal/_curry2';\nimport _isString from './internal/_isString';\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      var list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nvar nth = /*#__PURE__*/_curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\nexport default nth;","import nth from './nth';\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */\nvar last = /*#__PURE__*/nth(-1);\nexport default last;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xdropRepeatsWith from './internal/_xdropRepeatsWith';\nimport last from './last';\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nvar dropRepeatsWith = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\nexport default dropRepeatsWith;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false`\n * if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if truthy, otherwise the second argument.\n * @see R.either\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nvar or = /*#__PURE__*/_curry2(function or(a, b) {\n  return a || b;\n});\nexport default or;","import _curry1 from './internal/_curry1';\nimport _isArguments from './internal/_isArguments';\nimport _isArray from './internal/_isArray';\nimport _isObject from './internal/_isObject';\nimport _isString from './internal/_isString';\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));      //=> Nothing()\n *      R.empty([1, 2, 3]);     //=> []\n *      R.empty('unicorns');    //=> ''\n *      R.empty({x: 1, y: 2});  //=> {}\n */\nvar empty = /*#__PURE__*/_curry1(function empty(x) {\n  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n    return arguments;\n  }() :\n  // else\n  void 0;\n});\nexport default empty;","import _curry2 from './internal/_curry2';\nimport drop from './drop';\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */\nvar takeLast = /*#__PURE__*/_curry2(function takeLast(n, xs) {\n  return drop(n >= 0 ? xs.length - n : 0, xs);\n});\nexport default takeLast;","import _curry1 from './internal/_curry1';\nimport curryN from './curryN';\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nvar flip = /*#__PURE__*/_curry1(function flip(fn) {\n  return curryN(fn.length, function (a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\nexport default flip;","import _curry1 from './internal/_curry1';\nimport _identity from './internal/_identity';\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nvar identity = /*#__PURE__*/_curry1(_identity);\nexport default identity;","export default function _identity(x) {\n  return x;\n}","import _containsWith from './internal/_containsWith';\nimport _curry3 from './internal/_curry3';\nimport _filter from './internal/_filter';\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = /*#__PURE__*/_curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function (x) {\n    return _containsWith(pred, x, ys);\n  }, xs);\n});\nexport default innerJoin;","import _contains from './_contains';\n\nvar _Set = /*#__PURE__*/function () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  };\n\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  };\n\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  return _Set;\n}();\n\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n          return false;\n        }\n      }\n      // these types can all utilise the native Set\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        if (!_contains(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n          return false;\n        }\n        return true;\n      }\n    /* falls through */\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n        return false;\n      }\n      // scan through all previously applied items\n      if (!_contains(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n        return false;\n      }\n      return true;\n  }\n}\n\n// A simple Set type that honours R.equals semantics\nexport default _Set;","import _Set from './internal/_Set';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\nvar uniqBy = /*#__PURE__*/_curry2(function uniqBy(fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default uniqBy;","import identity from './identity';\nimport uniqBy from './uniqBy';\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nvar uniq = /*#__PURE__*/uniqBy(identity);\nexport default uniq;","import _checkForMethod from './internal/_checkForMethod';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n */\nvar intersperse = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\nexport default intersperse;","import _curry2 from './internal/_curry2';\n\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      var matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\nvar objOf = /*#__PURE__*/_curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\nexport default objOf;","import _objectAssign from './_objectAssign';\n\nexport default typeof Object.assign === 'function' ? Object.assign : _objectAssign;","import _assign from './_assign';\nimport _identity from './_identity';\nimport _isArrayLike from './_isArrayLike';\nimport _isTransformer from './_isTransformer';\nimport objOf from '../objOf';\n\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function (xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function (a, b) {\n    return a + b;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function (result, input) {\n    return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);\n  },\n  '@@transducer/result': _identity\n};\n\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n  throw new Error('Cannot create transformer for ' + obj);\n}","import _clone from './internal/_clone';\nimport _curry3 from './internal/_curry3';\nimport _isTransformer from './internal/_isTransformer';\nimport _reduce from './internal/_reduce';\nimport _stepCat from './internal/_stepCat';\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nvar into = /*#__PURE__*/_curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\nexport default into;","import _curry2 from './internal/_curry2';\nimport _isFunction from './internal/_isFunction';\nimport curryN from './curryN';\nimport toString from './toString';\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nvar invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\nexport default invoker;","import _curry2 from './internal/_curry2';\n\n/**\n * See if an object (`val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nvar is = /*#__PURE__*/_curry2(function is(Ctor, val) {\n  return val != null && val.constructor === Ctor || val instanceof Ctor;\n});\nexport default is;","import invoker from './invoker';\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      var spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nvar join = /*#__PURE__*/invoker(1, 'join');\nexport default join;","import _curry1 from './internal/_curry1';\nimport converge from './converge';\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nvar juxt = /*#__PURE__*/_curry1(function juxt(fns) {\n  return converge(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\nexport default juxt;","import _curry1 from './internal/_curry1';\nimport _isNumber from './internal/_isNumber';\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nvar length = /*#__PURE__*/_curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\nexport default length;","export default function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n}","import _curry2 from './internal/_curry2';\nimport map from './map';\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lens = /*#__PURE__*/_curry2(function lens(getter, setter) {\n  return function (toFunctorFn) {\n    return function (target) {\n      return map(function (focus) {\n        return setter(focus, target);\n      }, toFunctorFn(getter(target)));\n    };\n  };\n});\nexport default lens;","import add from './add';\nimport reduce from './reduce';\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nvar sum = /*#__PURE__*/reduce(add, 0);\nexport default sum;","import _curry1 from './internal/_curry1';\nimport sum from './sum';\n\n/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.median\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */\nvar mean = /*#__PURE__*/_curry1(function mean(list) {\n  return sum(list) / list.length;\n});\nexport default mean;","import _arity from './internal/_arity';\nimport _curry2 from './internal/_curry2';\nimport _has from './internal/_has';\n\n/**\n * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an\n * additional function that will be applied to a given argument set and used to\n * create the cache key under which the results of the function to be memoized\n * will be stored. Care must be taken when implementing key generation to avoid\n * clashes that may overwrite previous entries erroneously.\n *\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoize\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoizeWith(R.identity, n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nvar memoizeWith = /*#__PURE__*/_curry2(function memoizeWith(mFn, fn) {\n  var cache = {};\n  return _arity(fn.length, function () {\n    var key = mFn.apply(this, arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\nexport default memoizeWith;","import _curry3 from './internal/_curry3';\nimport _has from './internal/_has';\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nvar mergeWithKey = /*#__PURE__*/_curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !_has(k, result)) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\nexport default mergeWithKey;","import _curry3 from './internal/_curry3';\nimport _isObject from './internal/_isObject';\nimport mergeWithKey from './mergeWithKey';\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWithKey = /*#__PURE__*/_curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function (k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\nexport default mergeDeepWithKey;","import _curry2 from './internal/_curry2';\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      var double = R.multiply(2);\n *      var triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nvar multiply = /*#__PURE__*/_curry2(function multiply(a, b) {\n  return a * b;\n});\nexport default multiply;","import _curry3 from './internal/_curry3';\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\nvar Identity = function (x) {\n  return { value: x, map: function (f) {\n      return Identity(f(x));\n    } };\n};\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\nexport default over;","import _curry2 from './internal/_curry2';\n\n/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */\nvar pickAll = /*#__PURE__*/_curry2(function pickAll(names, obj) {\n  var result = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    var name = names[idx];\n    result[name] = obj[name];\n    idx += 1;\n  }\n  return result;\n});\nexport default pickAll;","import _concat from './internal/_concat';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nvar prepend = /*#__PURE__*/_curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\nexport default prepend;","import _curry2 from './internal/_curry2';\nimport curryN from './curryN';\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nvar useWith = /*#__PURE__*/_curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function () {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\nexport default useWith;","import _curry3 from './internal/_curry3';\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nvar reduceRight = /*#__PURE__*/_curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n  return acc;\n});\nexport default reduceRight;","import _curry2 from './internal/_curry2';\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = /*#__PURE__*/_curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\nexport default times;","import _curry2 from './internal/_curry2';\nimport ap from './ap';\nimport map from './map';\nimport prepend from './prepend';\nimport reduceRight from './reduceRight';\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Function} of\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n */\nvar sequence = /*#__PURE__*/_curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {\n    return ap(map(prepend, x), acc);\n  }, of([]), traversable);\n});\nexport default sequence;","import _curry2 from './internal/_curry2';\n\n/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0));\n *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      var people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */\nvar sortBy = /*#__PURE__*/_curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\nexport default sortBy;","import _curry2 from './internal/_curry2';\n\n/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [(a, a) -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @example\n *\n *      var alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      var bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      var people = [clara, bob, alice];\n *      var ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */\nvar sortWith = /*#__PURE__*/_curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var result = 0;\n    var i = 0;\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n    return result;\n  });\n});\nexport default sortWith;","import _containsWith from './internal/_containsWith';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      var strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\nvar uniqWith = /*#__PURE__*/_curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_containsWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default uniqWith;","import _curry1 from './internal/_curry1';\n\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar hasProtoTrim = typeof String.prototype.trim === 'function';\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\nvar _trim = !hasProtoTrim || /*#__PURE__*/ws.trim() || ! /*#__PURE__*/zeroWidth.trim() ? function trim(str) {\n  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n  return str.replace(beginRx, '').replace(endRx, '');\n} : function trim(str) {\n  return str.trim();\n};\nvar trim = /*#__PURE__*/_curry1(_trim);\nexport default trim;","import _curry2 from './internal/_curry2';\nimport _has from './internal/_has';\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.whereEq\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nvar where = /*#__PURE__*/_curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\nexport default where;"],"sourceRoot":""}