{"version":3,"sources":["webpack:///./src/utils/get-upcoming-event.js","webpack:///./src/pages/index.js","webpack:///./src/components/speaker-profile.js","webpack:///./src/components/talk-content.js"],"names":["getUpcomingEvent","allEvents","extractDate","today","extractor","edge","frontmatter","date","sortedEvents","R","length","todayMoment","moment","startOf","datesAfter","event","isSameOrBefore","PostPage","post","to","fields","slug","title","formatDate","dangerouslySetInnerHTML","__html","html","IndexPage","data","talks","edges","map","node","posts","sortedPosts","key","Date","upcomingEvent","speakers","locations","allSpeakers","allLocations","location","locationId","speakersOfTalk","findSpeakersForTalk","talk","speakerList","linkToDetailsPage","query","SpeakerProfile","speaker","Container","Row","pic","Col","sm","xs","style","textAlign","maxWidth","alt","fluid","childImageSharp","name","twitter_name","href","className","SpeakerHeadline","LocationInfo","info","street","number","zip","city","TagsLine","tags","tag","icon","faTag","Headline","TalkContent","poster","id","time","virtual"],"mappings":"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","file":"component---src-pages-index-js-8af0ed10cf9fec80b1c2.js","sourcesContent":["import moment from \"moment/moment\"\nimport * as R from \"ramda\"\n\n/**\n * This function is used to determine the next upcoming event based on a list of events and the current date.\n * This is used to mark the next event in the list of all events and to determine which talk to show on the front page.\n *\n * If there is no event in the list the is in the future of today, then the last event is used.\n *\n *\n * @param allEvents a list of events\n * @param extractDate an optional function to extract the date from the event objects.\n * If no function is provided then a property \"frontmatter.date\" is used based on the markdown standard\n * @param today a date object of today. Usualy created by \"new Date()\" or a string representing today.\n * Basically anything that can parsed by moment.js\n */\nconst getUpcomingEvent = ({ allEvents, extractDate, today }) => {\n  if(!allEvents) {\n    return undefined\n  }\n\n  const extractor = extractDate ? extractDate : edge => edge.frontmatter.date\n\n  const sortedEvents = R.sortBy(extractor)(allEvents)\n\n  if(sortedEvents.length === 1) {\n    return sortedEvents[0]\n  }\n\n  const todayMoment = moment(today).startOf(\"day\")\n\n  const datesAfter = R.filter(event => {\n    const date = moment(extractor(event)).startOf(\"day\")\n\n    return todayMoment.isSameOrBefore(date)\n  })(sortedEvents)\n\n  if(datesAfter && datesAfter.length > 0) {\n    return datesAfter[0]\n  } else {\n    return R.reverse(sortedEvents)[0]\n  }\n}\n\nexport default getUpcomingEvent","import React from \"react\"\n\nimport * as R from \"ramda\"\n\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport getUpcomingEvent from \"../utils/get-upcoming-event\"\nimport formatDate from \"../utils/format-date\"\nimport TalkContent from \"../components/talk-content\"\nimport findSpeakersForTalk from \"../utils/find-speakers-for-talk\"\n\nconst PostPage = ({ post }) => (\n  <div>\n    <h2>\n      <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n    </h2>\n\n    {post.frontmatter.date && <p>{formatDate(post.frontmatter.date)}</p>}\n\n    <div dangerouslySetInnerHTML={{ __html: post.html }} />\n    <hr />\n  </div>\n)\n\nconst IndexPage = ({ data }) => {\n  const talks = data.talks.edges.map(edge => edge.node)\n  const posts = data.posts ? data.posts.edges.map(edge => edge.node) : []\n\n  if (posts.length > 0) {\n    const sortedPosts = R.sortWith([R.descend(post => post.frontmatter.date)])(posts)\n\n    return (\n      <Layout>\n        {sortedPosts.map(post => (\n          <PostPage key={post.fields.slug} post={post} />\n        ))}\n      </Layout>\n    )\n  } else {\n    const today = new Date()\n\n    const upcomingEvent = getUpcomingEvent({ allEvents: talks, today })\n\n    const { speakers, locations } = data\n\n    const allSpeakers = speakers.edges.map(edge => edge.node)\n    const allLocations = locations.edges.map(edge => edge.node)\n\n    const location = R.filter(location => location.fields.locationId === upcomingEvent.frontmatter.location)(\n      allLocations\n    )[0]\n    const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk: upcomingEvent })\n\n    return (\n      <Layout>\n        <TalkContent talk={upcomingEvent} speakerList={speakersOfTalk} location={location} linkToDetailsPage={true} />\n      </Layout>\n    )\n  }\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    talks: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"talks\" } } }) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            title\n            date\n            time\n            speaker\n            location\n            virtual\n            poster {\n              childImageSharp {\n                id\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            tags\n          }\n          fields {\n            slug\n            sourceName\n          }\n        }\n      }\n    }\n\n    posts: allMarkdownRemark(\n      filter: { fields: { sourceName: { eq: \"posts\" } }, frontmatter: { show_on_frontpage: { eq: true } } }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            title\n            date\n            show_on_frontpage\n          }\n          fields {\n            slug\n            sourceName\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            name\n            pic {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            twitter_name\n          }\n          fields {\n            slug\n            speakerId\n          }\n        }\n      }\n    }\n\n    locations: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"locations\" } } }) {\n      edges {\n        node {\n          fields {\n            slug\n            locationId\n          }\n          frontmatter {\n            name\n            number\n            info\n            zip\n            city\n            street\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Img from \"gatsby-image\"\n\nimport { Container, Col, Row } from \"reactstrap\"\n\nconst SpeakerProfile = ({ speaker }) => {\n  return (\n    <Container>\n      <Row>\n        {speaker.frontmatter.pic && (\n          <Col sm=\"6\" xs=\"12\" style={{textAlign: \"center\", maxWidth: \"400px\"}}>\n            <Link to={speaker.fields.slug}>\n              <Img alt=\"speaker\" fluid={speaker.frontmatter.pic.childImageSharp.fluid} />\n            </Link>\n          </Col>\n        )}\n\n        <Col sm=\"6\" xs=\"12\">\n          <div>\n            <p>\n              <Link to={speaker.fields.slug}>\n                <strong>{speaker.frontmatter.name}</strong>\n              </Link>\n            </p>\n\n            {speaker.frontmatter.twitter_name && (\n              <p>\n                Twitter:{\" \"}\n                <a href={`https://twitter.com/${speaker.frontmatter.twitter_name}`}>{`@${\n                  speaker.frontmatter.twitter_name\n                }`}</a>\n              </p>\n            )}\n          </div>\n\n          <div className=\"description\" dangerouslySetInnerHTML={{ __html: speaker.html }} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default SpeakerProfile\n","import React from \"react\"\nimport formatDate from \"../utils/format-date\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { Link } from \"gatsby\"\n\nimport * as R from \"ramda\"\nimport SpeakerProfile from \"./speaker-profile\"\n\nimport Img from \"gatsby-image\"\n\nconst SpeakerHeadline = ({ speakerList }) => (\n  <span className=\"lead\">\n    von{\" \"}\n    {R.intersperse(\", \")(\n      speakerList.map(speaker => (\n        <Link key={speaker.fields.slug} to={speaker.fields.slug}>\n          {speaker.frontmatter.name}\n        </Link>\n      ))\n    )}\n  </span>\n)\n\nconst LocationInfo = ({ location }) => {\n  const { frontmatter } = location\n\n  return (\n    <Link to={location.fields.slug}>\n      <address>\n        {frontmatter.name}\n        <br />\n        {frontmatter.info && (\n          <>\n            {frontmatter.info}\n            <br />\n          </>\n        )}\n        {`${frontmatter.street} ${frontmatter.number}`}\n        <br />\n        {`${frontmatter.zip} ${frontmatter.city}`}\n        <br />\n      </address>\n    </Link>\n  )\n}\n\nconst TagsLine = ({ tags }) => {\n  if (tags) {\n    return (\n      <>\n        {R.intersperse(\", \")(\n          tags.map(tag => (\n            <Link key={tag} to={`/tags/#${tag}`}>\n              <FontAwesomeIcon icon={faTag} /> {tag}\n            </Link>\n          ))\n        )}\n      </>\n    )\n  } else {\n    return null\n  }\n}\n\nconst Headline = ({ talk, linkToDetailsPage }) => {\n  if (linkToDetailsPage) {\n    return (\n      <h2>\n        <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\n      </h2>\n    )\n  } else {\n    return <h2>{talk.frontmatter.title}</h2>\n  }\n}\n\nconst TalkContent = ({ talk, speakerList, location, linkToDetailsPage }) => (\n  <>\n    <Headline talk={talk} linkToDetailsPage={linkToDetailsPage} />\n    <SpeakerHeadline speakerList={speakerList} /> | {formatDate(talk.frontmatter.date)}\n    <p>\n      <TagsLine tags={talk.frontmatter.tags} />\n    </p>\n    <article className=\"talk-content\">\n      <div dangerouslySetInnerHTML={{ __html: talk.html }} />\n\n      {talk.frontmatter.poster && (\n        <Link to={`/posters#${talk.frontmatter.poster.childImageSharp.id}`}>\n          <Img fluid={talk.frontmatter.poster.childImageSharp.fluid} />\n        </Link>\n      )}\n\n      <hr />\n\n      {speakerList.map(speaker => (\n        <SpeakerProfile key={speaker.id} speaker={speaker} />\n      ))}\n\n      <hr />\n\n      <div>\n        <p>\n          Datum: {formatDate(talk.frontmatter.date)}, {talk.frontmatter.time ?? \"19:00 Uhr\"}\n        </p>\n        {talk.frontmatter.virtual ? (\n          <>Das Treffen findet Online statt. Siehe Beschreibung.</>\n        ) : (\n          <>Ort: {location ? <LocationInfo location={location} /> : <span>wird noch bekannt gegeben</span>}</>\n        )}\n      </div>\n\n      <br />\n      <p>\n        Die Veranstaltung wird durch die <i>Java User Group Görlitz</i> (im{\" \"}\n        <a href=\"http://www.ijug.eu/\">iJUG Verband</a>) organisiert.\n      </p>\n    </article>\n  </>\n)\n\nexport default TalkContent\n"],"sourceRoot":""}