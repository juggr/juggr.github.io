{"version":3,"sources":["webpack:///./src/templates/talk-page.js","webpack:///./src/utils/format-date.js","webpack:///./src/components/speaker-profile.js","webpack:///./src/components/talk-content.js"],"names":["__webpack_exports__","default","_ref","data","talk","speakers","location","speakerList","edges","map","edge","node","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_talk_content__WEBPACK_IMPORTED_MODULE_2__","linkToDetailsPage","query","moment__WEBPACK_IMPORTED_MODULE_0___default","locale","date","format","260","e","t","n","r","l","i","m","c","u","o","s","E","speaker_profile","speaker","react_default","reactstrap_es","d","k","frontmatter","pic","b","sm","xs","style","textAlign","maxWidth","gatsby_browser_entry","Link","to","fields","slug","gatsby_image_default","alt","fluid","childImageSharp","name","twitter_name","href","className","dangerouslySetInnerHTML","__html","html","talk_content_SpeakerHeadline","es","intersperse","key","talk_content_LocationInfo","_ref2","info","Fragment","street","number","zip","city","talk_content_TagsLine","_ref3","tags","tag","index_es","icon","free_solid_svg_icons_index_es","talk_content_Headline","_ref4","title","_ref5","Object","format_date","poster","id"],"mappings":"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","file":"component---src-templates-talk-page-js-2c24c5b4a82a6006f270.js","sourcesContent":["import React from \"react\"\n\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nimport TalkContent from \"../components/talk-content\"\n\nconst TalkPage = ({ data }) => {\n  const { talk, speakers, location } = data\n\n  const speakerList = speakers.edges.map(edge => edge.node)\n\n  return (\n    <Layout>\n      <TalkContent talk={talk} speakerList={speakerList} location={location} linkToDetailsPage={false} />\n    </Layout>\n  )\n}\n\nexport default TalkPage\n\nexport const query = graphql`\n  query($slug: String!, $speakerSlugs: [String]!, $locationSlug: String!) {\n    talk: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date\n        tags\n        poster {\n          childImageSharp {\n            fluid {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(\n      filter: { fields: { slug: { in: $speakerSlugs } } }\n      sort: { fields: frontmatter___name, order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            name\n            pic {\n              childImageSharp {\n                fluid(maxWidth: 400) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            twitter_name\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    location: markdownRemark(fields: { slug: { eq: $locationSlug } }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        name\n        number\n        info\n        zip\n        city\n        street\n      }\n    }\n  }\n`\n","import moment from \"moment\"\n\nimport \"moment/locale/de\"\n\nmoment.locale(\"de\")\n\nconst formatDate = date => moment(date).format(\"LL\")\n\nexport default formatDate","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Img from \"gatsby-image\"\n\nimport { Container, Col, Row } from \"reactstrap\"\n\nconst SpeakerProfile = ({ speaker }) => {\n  return (\n    <Container>\n      <Row>\n        {speaker.frontmatter.pic && (\n          <Col sm=\"6\" xs=\"12\" style={{textAlign: \"center\", maxWidth: \"400px\"}}>\n            <Link to={speaker.fields.slug}>\n              <Img alt=\"speaker\" fluid={speaker.frontmatter.pic.childImageSharp.fluid} />\n            </Link>\n          </Col>\n        )}\n\n        <Col sm=\"6\" xs=\"12\">\n          <div>\n            <p>\n              <Link to={speaker.fields.slug}>\n                <strong>{speaker.frontmatter.name}</strong>\n              </Link>\n            </p>\n\n            {speaker.frontmatter.twitter_name && (\n              <p>\n                Twitter:{\" \"}\n                <a href={`https://twitter.com/${speaker.frontmatter.twitter_name}`}>{`@${\n                  speaker.frontmatter.twitter_name\n                }`}</a>\n              </p>\n            )}\n          </div>\n\n          <div className=\"description\" dangerouslySetInnerHTML={{ __html: speaker.html }} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default SpeakerProfile\n","import React from \"react\"\nimport formatDate from \"../utils/format-date\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { Link } from \"gatsby\"\n\nimport * as R from \"ramda\"\nimport SpeakerProfile from \"./speaker-profile\"\n\nimport Img from \"gatsby-image\"\n\nconst SpeakerHeadline = ({ speakerList }) => (\n  <span className=\"lead\">\n    von{\" \"}\n    {R.intersperse(\", \")(\n      speakerList.map(speaker => (\n        <Link key={speaker.fields.slug} to={speaker.fields.slug}>\n          {speaker.frontmatter.name}\n        </Link>\n      ))\n    )}\n  </span>\n)\n\nconst LocationInfo = ({ location }) => {\n  const { frontmatter } = location\n\n  return (\n    <Link to={location.fields.slug}>\n      <address>\n        {frontmatter.name}\n        <br />\n        {frontmatter.info && (\n          <>\n            {frontmatter.info}\n            <br />\n          </>\n        )}\n        {`${frontmatter.street} ${frontmatter.number}`}\n        <br />\n        {`${frontmatter.zip} ${frontmatter.city}`}\n        <br />\n      </address>\n    </Link>\n  )\n}\n\nconst TagsLine = ({ tags }) => {\n  if (tags) {\n    return (\n      <>\n        {R.intersperse(\", \")(\n          tags.map(tag => (\n            <Link key={tag} to={`/tags/#${tag}`}>\n              <FontAwesomeIcon icon={faTag} /> {tag}\n            </Link>\n          ))\n        )}\n      </>\n    )\n  } else {\n    return null\n  }\n}\n\nconst Headline = ({ talk, linkToDetailsPage }) => {\n  if (linkToDetailsPage) {\n    return (\n      <h2>\n        <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\n      </h2>\n    )\n  } else {\n    return <h2>{talk.frontmatter.title}</h2>\n  }\n}\n\nconst TalkContent = ({ talk, speakerList, location, linkToDetailsPage }) => (\n  <>\n    <Headline talk={talk} linkToDetailsPage={linkToDetailsPage} />\n    <SpeakerHeadline speakerList={speakerList} /> | {formatDate(talk.frontmatter.date)}\n    <p>\n      <TagsLine tags={talk.frontmatter.tags} />\n    </p>\n    <article>\n      <div dangerouslySetInnerHTML={{ __html: talk.html }} />\n\n      {talk.frontmatter.poster && <Img fluid={talk.frontmatter.poster.childImageSharp.fluid} />}\n\n      <hr />\n\n      {speakerList.map(speaker => (\n        <SpeakerProfile key={speaker.id} speaker={speaker} />\n      ))}\n\n      <hr />\n\n      <div>\n        <p>Datum: {formatDate(talk.frontmatter.date)}, 19:00 Uhr</p>\n        Ort: {location ? <LocationInfo location={location} /> : <span>wird noch bekannt gegeben</span>}\n      </div>\n\n      <br />\n      <p>\n        Die Veranstaltung wird durch die <i>Java User Group Görlitz</i> (im{\" \"}\n        <a href=\"http://www.ijug.eu/\">iJUG Verband</a>) organisiert.\n      </p>\n    </article>\n  </>\n)\n\nexport default TalkContent\n"],"sourceRoot":""}