{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/find-speakers-for-talk.js","webpack:///./src/utils/get-upcoming-event.js"],"names":["PostPage","_ref","post","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","gatsby__WEBPACK_IMPORTED_MODULE_2__","Link","to","fields","slug","frontmatter","title","date","Object","_utils_format_date__WEBPACK_IMPORTED_MODULE_5__","dangerouslySetInnerHTML","__html","html","t","default","_ref2","data","talks","edges","map","edge","node","posts","length","sortedPosts","ramda__WEBPACK_IMPORTED_MODULE_1__","j","c","_components_layout__WEBPACK_IMPORTED_MODULE_3__","key","today","Date","upcomingEvent","_utils_get_upcoming_event__WEBPACK_IMPORTED_MODULE_4__","allEvents","speakers","locations","allSpeakers","allLocations","location","d","locationId","speakersOfTalk","_utils_find_speakers_for_talk__WEBPACK_IMPORTED_MODULE_7__","talk","_components_talk_content__WEBPACK_IMPORTED_MODULE_6__","speakerList","linkToDetailsPage","query","__webpack_exports__","ramda__WEBPACK_IMPORTED_MODULE_0__","e","speaker","extractDate","extractor","sortedEvents","i","todayMoment","moment_moment__WEBPACK_IMPORTED_MODULE_0___default","datesAfter","event","isBefore","h"],"mappings":"wNAYMA,EAAW,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACfC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAAC,MAAKC,GAAIN,EAAKO,OAAOC,MAAOR,EAAKS,YAAYC,QAG/CV,EAAKS,YAAYE,MAAQV,EAAAC,EAAAC,cAAA,SAAIS,OAAAC,EAAAX,EAAAU,CAAWZ,EAAKS,YAAYE,OAE1DV,EAAAC,EAAAC,cAAA,OAAKW,yBAA2BC,OAAQf,EAAKgB,QAC7Cf,EAAAC,EAAAC,cAAA,aAAAc,EAAAC,QAIc,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACbC,EAAQD,EAAKC,MAAMC,MAAMC,IAAI,SAAAC,GAAA,OAAQA,EAAKC,OAC1CC,EAAQN,EAAKM,MAAQN,EAAKM,MAAMJ,MAAMC,IAAI,SAAAC,GAAA,OAAQA,EAAKC,UAE7D,GAAIC,EAAMC,OAAS,EAAG,CACpB,IAAMC,EAAcC,EAAAC,GAAYD,EAAAE,EAAU,SAAA/B,GAAA,OAAQA,EAAKS,YAAYE,QAA/CkB,CAAuDH,GAE3E,OACEzB,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,KACG0B,EAAYL,IAAI,SAAAvB,GAAA,OACfC,EAAAC,EAAAC,cAACL,GAASmC,IAAKjC,EAAKO,OAAOC,KAAMR,KAAMA,OAK7C,IAAMkC,EAAQ,IAAIC,KAEZC,EAAgBxB,OAAAyB,EAAAnC,EAAAU,EAAmB0B,UAAWjB,EAAOa,UAEnDK,EAAwBnB,EAAxBmB,SAAUC,EAAcpB,EAAdoB,UAEZC,EAAcF,EAASjB,MAAMC,IAAI,SAAAC,GAAA,OAAQA,EAAKC,OAC9CiB,EAAeF,EAAUlB,MAAMC,IAAI,SAAAC,GAAA,OAAQA,EAAKC,OAEhDkB,EAAWd,EAAAe,EAAS,SAAAD,GAAA,OAAYA,EAASpC,OAAOsC,aAAeT,EAAc3B,YAAYkC,UAA9Ed,CACfa,GACA,GACII,EAAiBlC,OAAAmC,EAAA7C,EAAAU,EAAsB6B,cAAaO,KAAMZ,IAEhE,OACEnC,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,KACED,EAAAC,EAAAC,cAAC8C,EAAA/C,GAAY8C,KAAMZ,EAAec,YAAaJ,EAAgBH,SAAUA,EAAUQ,yBAQpF,IAAMC,8DC7CbC,EAAAnD,EAR4B,SAAAH,GAA2B,IAAxB0C,EAAwB1C,EAAxB0C,YAAaO,EAAWjD,EAAXiD,KAC1C,OAAOM,EAAAC,EACL,SAACC,EAAShD,GAAV,OAAmBgD,EAAQjD,OAAOC,OAAf,aAAqCA,EAArC,KACnBiC,EACAO,EAAKvC,YAAY+C,2EC6BrBH,EAAAnD,EA5ByB,SAAAH,GAAuC,IAApCuC,EAAoCvC,EAApCuC,UAAWmB,EAAyB1D,EAAzB0D,YAAavB,EAAYnC,EAAZmC,MAClD,GAAII,EAAJ,CAIA,IAAMoB,EAAYD,GAA4B,SAAAjC,GAAA,OAAQA,EAAKf,YAAYE,MAEjEgD,EAAe9B,EAAA+B,EAASF,EAAT7B,CAAoBS,GAEzC,GAA2B,IAAxBqB,EAAahC,OACd,OAAOgC,EAAa,GAGtB,IAAME,EAAcC,IAAO5B,GAErB6B,EAAalC,EAAAe,EAAS,SAAAoB,GAC1B,IAAMrD,EAAOmD,IAAOJ,EAAUM,IAE9B,OAAOH,EAAYI,SAAStD,IAHXkB,CAIhB8B,GAEH,OAAGI,GAAcA,EAAWpC,OAAS,EAC5BoC,EAAW,GAEXlC,EAAAqC,EAAUP,GAAc","file":"component---src-pages-index-js-d1ae7064252d72efdf20.js","sourcesContent":["import React from \"react\"\n\nimport * as R from \"ramda\"\n\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport getUpcomingEvent from \"../utils/get-upcoming-event\"\nimport formatDate from \"../utils/format-date\"\nimport TalkContent from \"../components/talk-content\"\nimport findSpeakersForTalk from \"../utils/find-speakers-for-talk\"\n\nconst PostPage = ({ post }) => (\n  <div>\n    <h2>\n      <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n    </h2>\n\n    {post.frontmatter.date && <p>{formatDate(post.frontmatter.date)}</p>}\n\n    <div dangerouslySetInnerHTML={{ __html: post.html }} />\n    <hr />\n  </div>\n)\n\nconst IndexPage = ({ data }) => {\n  const talks = data.talks.edges.map(edge => edge.node)\n  const posts = data.posts ? data.posts.edges.map(edge => edge.node) : []\n\n  if (posts.length > 0) {\n    const sortedPosts = R.sortWith([R.descend(post => post.frontmatter.date)])(posts)\n\n    return (\n      <Layout>\n        {sortedPosts.map(post => (\n          <PostPage key={post.fields.slug} post={post} />\n        ))}\n      </Layout>\n    )\n  } else {\n    const today = new Date()\n\n    const upcomingEvent = getUpcomingEvent({ allEvents: talks, today })\n\n    const { speakers, locations } = data\n\n    const allSpeakers = speakers.edges.map(edge => edge.node)\n    const allLocations = locations.edges.map(edge => edge.node)\n\n    const location = R.filter(location => location.fields.locationId === upcomingEvent.frontmatter.location)(\n      allLocations\n    )[0]\n    const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk: upcomingEvent })\n\n    return (\n      <Layout>\n        <TalkContent talk={upcomingEvent} speakerList={speakersOfTalk} location={location} linkToDetailsPage={true} />\n      </Layout>\n    )\n  }\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    talks: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"talks\" } } }) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            title\n            date\n            speaker\n            location\n            poster {\n              childImageSharp {\n                sizes {\n                  ...GatsbyImageSharpSizes\n                }\n              }\n            }\n          }\n          fields {\n            slug\n            sourceName\n          }\n        }\n      }\n    }\n\n    posts: allMarkdownRemark(\n      filter: { fields: { sourceName: { eq: \"posts\" } }, frontmatter: { show_on_frontpage: { eq: true } } }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            title\n            date\n            show_on_frontpage\n          }\n          fields {\n            slug\n            sourceName\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            name\n            pic {\n              childImageSharp {\n                sizes {\n                  ...GatsbyImageSharpSizes\n                }\n              }\n            }\n            twitter_name\n          }\n          fields {\n            slug\n            speakerId\n          }\n        }\n      }\n    }\n\n    locations: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"locations\" } } }) {\n      edges {\n        node {\n          fields {\n            slug\n            locationId\n          }\n          frontmatter {\n            name\n            info\n            zip\n            city\n            street\n          }\n        }\n      }\n    }\n  }\n`\n","import * as R from \"ramda\"\n\n/**\n * For each talk we cannot directly query the speaker info (especially the name) but only the speakerSlugs (not the full slug but the important\n * speaker-identifier with which we can create the slug)\n * we have to query all speakers in a separate query. Then we need to extract from this allSpeakers-list\n * only those speaker info objects that belong to a given talk. This is what this method is doing.\n *\n * @param allSpeakers an array of all speaker objects\n * @param talk a talk object\n */\nconst findSpeakersForTalk = ({ allSpeakers, talk }) => {\n  return R.innerJoin(\n    (speaker, slug) => speaker.fields.slug === `/speakers/${slug}/`,\n    allSpeakers,\n    talk.frontmatter.speaker\n  )\n}\n\nexport default findSpeakersForTalk","import moment from \"moment/moment\"\nimport * as R from \"ramda\"\n\n/**\n * This function is used to determine the next upcoming event based on a list of events and the current date.\n * This is used to mark the next event in the list of all events and to determine which talk to show on the front page.\n *\n * If there is no event in the list the is in the future of today, then the last event is used.\n *\n *\n * @param allEvents a list of events\n * @param extractDate an optional function to extract the date from the event objects.\n * If no function is provided then a property \"frontmatter.date\" is used based on the markdown standard\n * @param today a date object of today. Usualy created by \"new Date()\" or a string representing today.\n * Basically anything that can parsed by moment.js\n */\nconst getUpcomingEvent = ({ allEvents, extractDate, today }) => {\n  if(!allEvents) {\n    return undefined\n  }\n\n  const extractor = extractDate ? extractDate : edge => edge.frontmatter.date\n\n  const sortedEvents = R.sortBy(extractor)(allEvents)\n\n  if(sortedEvents.length === 1) {\n    return sortedEvents[0]\n  }\n\n  const todayMoment = moment(today)\n\n  const datesAfter = R.filter(event => {\n    const date = moment(extractor(event))\n\n    return todayMoment.isBefore(date)\n  })(sortedEvents)\n\n  if(datesAfter && datesAfter.length > 0) {\n    return datesAfter[0]\n  } else {\n    return R.reverse(sortedEvents)[0]\n  }\n}\n\nexport default getUpcomingEvent"],"sourceRoot":""}