{"version":3,"file":"component---src-pages-tags-tsx-de6815ace04d21511f1e.js","mappings":"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","sources":["webpack://jug-goerlitz/./node_modules/reactstrap/es/Badge.js","webpack://jug-goerlitz/./src/pages/tags.tsx","webpack://jug-goerlitz/./src/utils/find-speakers-for-talk.ts","webpack://jug-goerlitz/./src/utils/format-date.ts","webpack://jug-goerlitz/./node_modules/moment/locale/de.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"color\", \"innerRef\", \"pill\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  color: PropTypes.string,\n  pill: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  color: 'secondary',\n  pill: false,\n  tag: 'span'\n};\n\nvar Badge = function Badge(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      innerRef = props.innerRef,\n      pill = props.pill,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, 'badge', 'badge-' + color, pill ? 'badge-pill' : false), cssModule);\n\n  if (attributes.href && Tag === 'span') {\n    Tag = 'a';\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nBadge.propTypes = propTypes;\nBadge.defaultProps = defaultProps;\nexport default Badge;","import React from \"react\"\n\nimport { graphql, Link } from \"gatsby\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { Badge } from \"reactstrap\"\n\nimport * as R from \"ramda\"\n\nimport Layout from \"../components/layout\"\nimport { findSpeakersForTalk } from \"../utils/find-speakers-for-talk\"\nimport formatDate from \"../utils/format-date\"\n\nconst TagsPage = ({ data }) => {\n  const talks = data.talks.edges.map((edge) => edge.node)\n\n  const allSpeakers = data.speakers.edges.map((edge) => edge.node)\n\n  const tags = R.filter(\n    (s) => s,\n    R.uniq(\n      // R.chain is equal to flatMap\n      R.chain((talk) => talk.frontmatter.tags)(talks)\n    )\n  ).sort()\n\n  const talksWithSpeakers = talks.map((talk) => {\n    const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk })\n\n    return { ...talk, speakersOfTalk }\n  })\n\n  const talksGroupedByTag = tags.map((tag) => {\n    const filteredTalk = talksWithSpeakers\n      .filter((talk) => talk.frontmatter.tags)\n      .filter((talk) => talk.frontmatter.tags.includes(tag))\n\n    return {\n      tag,\n      talks: filteredTalk,\n    }\n  })\n\n  return (\n    <Layout>\n      <h2>Tags</h2>\n      <p>\n        {tags.map((tag) => (\n          <Badge key={tag} style={{ margin: \"0.1rem\" }} href={`#${tag}`}>\n            <FontAwesomeIcon icon={faTag} /> {tag}\n          </Badge>\n        ))}\n      </p>\n\n      {talksGroupedByTag.map((tagGroup) => {\n        const { tag, talks } = tagGroup\n\n        return (\n          <React.Fragment key={tag}>\n            <h3 id={tag}>{tag}</h3>\n            <ul>\n              {talks.map((talk) => {\n                const speakersString = R.join(\", \")(talk.speakersOfTalk.map((speaker) => speaker.frontmatter.name))\n\n                return (\n                  <li key={talk.id}>\n                    <span className=\"lead\">\n                      <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\n                    </span>\n                    {\" | \"} <time dateTime={talk.frontmatter.date}>{formatDate(talk.frontmatter.date)}</time>\n                    <p>von {speakersString}</p>\n                  </li>\n                )\n              })}\n            </ul>\n          </React.Fragment>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default TagsPage\n\nexport const query = graphql`\n  query {\n    talks: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"talks\" } } }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date\n            tags\n            speaker\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport { Head } from \"../components/head\"\n","import * as R from \"ramda\"\n\n/**\n * For each talk we cannot directly query the speaker info (especially the name) but only the speakerSlugs (not the full slug but the important\n * speaker-identifier with which we can create the slug)\n * we have to query all speakers in a separate query. Then we need to extract from this allSpeakers-list\n * only those speaker info objects that belong to a given talk. This is what this method is doing.\n *\n * @param allSpeakers an array of all speaker objects\n * @param talk a talk object\n */\nexport const findSpeakersForTalk = ({ allSpeakers, talk }) => {\n  return R.innerJoin(\n    (speaker, slug) => speaker.fields.slug === `/speakers/${slug}/`,\n    allSpeakers,\n    talk.frontmatter.speaker\n  )\n}\n","import moment from \"moment\"\n\nimport \"moment/locale/de\"\n\nmoment.locale(\"de\")\n\nconst formatDate = (date) => moment(date).format(\"LL\")\n\nexport default formatDate\n","//! moment.js locale configuration\n//! locale : German [de]\n//! author : lluchs : https://github.com/lluchs\n//! author: Menelion Elens√∫le: https://github.com/Oire\n//! author : Mikolaj Dadela : https://github.com/mik01aj\n\n;(function (global, factory) {\n   typeof exports === 'object' && typeof module !== 'undefined'\n       && typeof require === 'function' ? factory(require('../moment')) :\n   typeof define === 'function' && define.amd ? define(['../moment'], factory) :\n   factory(global.moment)\n}(this, (function (moment) { 'use strict';\n\n    //! moment.js locale configuration\n\n    function processRelativeTime(number, withoutSuffix, key, isFuture) {\n        var format = {\n            m: ['eine Minute', 'einer Minute'],\n            h: ['eine Stunde', 'einer Stunde'],\n            d: ['ein Tag', 'einem Tag'],\n            dd: [number + ' Tage', number + ' Tagen'],\n            w: ['eine Woche', 'einer Woche'],\n            M: ['ein Monat', 'einem Monat'],\n            MM: [number + ' Monate', number + ' Monaten'],\n            y: ['ein Jahr', 'einem Jahr'],\n            yy: [number + ' Jahre', number + ' Jahren'],\n        };\n        return withoutSuffix ? format[key][0] : format[key][1];\n    }\n\n    var de = moment.defineLocale('de', {\n        months: 'Januar_Februar_M√§rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(\n            '_'\n        ),\n        monthsShort:\n            'Jan._Feb._M√§rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),\n        monthsParseExact: true,\n        weekdays:\n            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(\n                '_'\n            ),\n        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),\n        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),\n        weekdaysParseExact: true,\n        longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY HH:mm',\n            LLLL: 'dddd, D. MMMM YYYY HH:mm',\n        },\n        calendar: {\n            sameDay: '[heute um] LT [Uhr]',\n            sameElse: 'L',\n            nextDay: '[morgen um] LT [Uhr]',\n            nextWeek: 'dddd [um] LT [Uhr]',\n            lastDay: '[gestern um] LT [Uhr]',\n            lastWeek: '[letzten] dddd [um] LT [Uhr]',\n        },\n        relativeTime: {\n            future: 'in %s',\n            past: 'vor %s',\n            s: 'ein paar Sekunden',\n            ss: '%d Sekunden',\n            m: processRelativeTime,\n            mm: '%d Minuten',\n            h: processRelativeTime,\n            hh: '%d Stunden',\n            d: processRelativeTime,\n            dd: processRelativeTime,\n            w: processRelativeTime,\n            ww: '%d Wochen',\n            M: processRelativeTime,\n            MM: processRelativeTime,\n            y: processRelativeTime,\n            yy: processRelativeTime,\n        },\n        dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n        ordinal: '%d.',\n        week: {\n            dow: 1, // Monday is the first day of the week.\n            doy: 4, // The week that contains Jan 4th is the first week of the year.\n        },\n    });\n\n    return de;\n\n})));\n"],"names":["_excluded","propTypes","color","pill","tag","innerRef","children","className","cssModule","Badge","props","Tag","attributes","classes","href","ref","defaultProps","_ref","data","talks","edges","map","edge","node","allSpeakers","speakers","tags","R","s","talk","frontmatter","sort","talksWithSpeakers","speakersOfTalk","findSpeakersForTalk","talksGroupedByTag","filteredTalk","filter","includes","React","Layout","key","style","margin","FontAwesomeIcon","icon","faTag","tagGroup","id","speakersString","speaker","name","Link","to","fields","slug","title","dateTime","date","formatDate","moment","format","processRelativeTime","number","withoutSuffix","isFuture","m","h","d","dd","w","M","MM","y","yy","defineLocale","months","split","monthsShort","monthsParseExact","weekdays","weekdaysShort","weekdaysMin","weekdaysParseExact","longDateFormat","LT","LTS","L","LL","LLL","LLLL","calendar","sameDay","sameElse","nextDay","nextWeek","lastDay","lastWeek","relativeTime","future","past","ss","mm","hh","ww","dayOfMonthOrdinalParse","ordinal","week","dow","doy","factory"],"sourceRoot":""}