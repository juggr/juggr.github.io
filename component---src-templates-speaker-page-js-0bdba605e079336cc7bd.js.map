{"version":3,"sources":["webpack:///./src/templates/speaker-page.js"],"names":["SpeakerPage","data","speaker","talks","frontmatter","name","pic","style","maxWidth","alt","fluid","childImageSharp","twitter_name","href","className","dangerouslySetInnerHTML","__html","html","edges","length","map","node","key","fields","slug","to","title"],"mappings":"4FAAA,6EAgDeA,UAzCK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,MAEjB,OACE,kBAAC,IAAD,KACE,4BAAKD,EAAQE,YAAYC,MAExBH,EAAQE,YAAYE,KACnB,yBAAKC,MAAO,CAAEC,SAAU,UACtB,kBAAC,IAAD,CAAKC,IAAI,UAAUC,MAAOR,EAAQE,YAAYE,IAAIK,gBAAgBD,SAIrER,EAAQE,YAAYQ,cACnB,sCACW,IACT,uBAAGC,KAAI,uBAAyBX,EAAQE,YAAYQ,cAApD,IACEV,EAAQE,YAAYQ,eAK1B,yBAAKE,UAAU,cAAcC,wBAAyB,CAAEC,OAAQd,EAAQe,QAExE,6BACCd,GACC,oCACGA,EAAMe,MAAMC,OADf,UAEE,4BACGhB,EAAMe,MAAME,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACf,wBAAIC,IAAKD,EAAKE,OAAOC,MACnB,kBAAC,OAAD,CAAMC,GAAIJ,EAAKE,OAAOC,MAAOH,EAAKjB,YAAYsB","file":"component---src-templates-speaker-page-js-0bdba605e079336cc7bd.js","sourcesContent":["import React from \"react\"\n\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport Layout from \"../components/layout\"\n\nconst SpeakerPage = ({ data }) => {\n  const { speaker, talks } = data\n\n  return (\n    <Layout>\n      <h2>{speaker.frontmatter.name}</h2>\n\n      {speaker.frontmatter.pic && (\n        <div style={{ maxWidth: \"400px\"}}>\n          <Img alt=\"speaker\" fluid={speaker.frontmatter.pic.childImageSharp.fluid} />\n        </div>\n      )}\n\n      {speaker.frontmatter.twitter_name && (\n        <p>\n          Twitter:{\" \"}\n          <a href={`https://twitter.com/${speaker.frontmatter.twitter_name}`}>{`@${\n            speaker.frontmatter.twitter_name\n          }`}</a>\n        </p>\n      )}\n\n      <div className=\"description\" dangerouslySetInnerHTML={{ __html: speaker.html }} />\n\n      <hr />\n      {talks && (\n        <>\n          {talks.edges.length} Talks:\n          <ul>\n            {talks.edges.map(({ node }) => (\n              <li key={node.fields.slug}>\n                <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </Layout>\n  )\n}\n\nexport default SpeakerPage\n\nexport const query = graphql`\n  query($speakerSlug: String!, $speakerId: String!) {\n    speaker: markdownRemark(fields: { slug: { eq: $speakerSlug } }) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        name\n        twitter_name\n        pic {\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    talks: allMarkdownRemark(\n      filter: { fields: { sourceName: { eq: \"talks\" } }, frontmatter: { speaker: { eq: $speakerId } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}