{"version":3,"sources":["webpack:///./src/pages/talks.js","webpack:///./src/components/page-header.js","webpack:///./src/components/page-footer.js","webpack:///./src/components/sidebar.js","webpack:///./src/components/layout.js","webpack:///./content/images/logo.png","webpack:///./content/images/javaland_2022_banner.jpg","webpack:///./content/images/jax22_banner.jpg","webpack:///./src/utils/format-date.js","webpack:///./src/utils/find-speakers-for-talk.js","webpack:///./src/utils/get-upcoming-event.js"],"names":["TalksPage","_ref","data","talks","edges","map","edge","node","allSpeakers","speakers","today","Date","upcomingEvent","getUpcomingEvent","allEvents","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","talk","speakersOfTalk","findSpeakersForTalk","speakersString","R","speaker","frontmatter","name","style","date","backgroundColor","undefined","key","id","className","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","fields","slug","title","dateTime","formatDate","query","LinkItem","children","react_default","NavItem","NavLink","tag","props","gatsby_link_default","Object","assign","activeClassName","PageHeader","_this","_React$Component","call","this","toggle","setState","prevState","collapsed","state","render","Navbar","color","light","expand","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","page_header_LinkItem","React","Component","PageFooter","gatsby_browser_entry","Sidebar","logo","Row","Col","sm","xs","md","alt","src","require","href","index_es","icon","faTwitter","faFacebook","faEnvelope","faGithub","faCalendarAlt","faRss","fontawesome","config","autoAddCss","Layout","Fragment","Helmet_default","site","siteMetadata","meta","content","description","dom","css","page_header","marginTop","sidebar","page_footer","_1238061294","module","exports","__webpack_require__","p","moment__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_0___default","n","moment","locale","format","innerJoin","moment_moment__WEBPACK_IMPORTED_MODULE_0__","moment_moment__WEBPACK_IMPORTED_MODULE_0___default","ramda__WEBPACK_IMPORTED_MODULE_1__","ramda__WEBPACK_IMPORTED_MODULE_2__","ramda__WEBPACK_IMPORTED_MODULE_3__","extractDate","extractor","sortedEvents","length","todayMoment","startOf","datesAfter","event","isSameOrBefore"],"mappings":"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","file":"component---src-pages-talks-js-9127760bfc78084b58fb.js","sourcesContent":["import React from \"react\"\n\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nimport formatDate from \"../utils/format-date\"\n\nimport * as R from \"ramda\"\n\nimport getUpcomingEvent from \"../utils/get-upcoming-event\"\nimport findSpeakersForTalk from \"../utils/find-speakers-for-talk\"\n\nconst TalksPage = ({ data }) => {\n  const talks = data.talks.edges.map(edge => edge.node)\n\n  const allSpeakers = data.speakers.edges.map(edge => edge.node)\n\n  const today = new Date()\n\n  const upcomingEvent = getUpcomingEvent({ allEvents: talks, today })\n\n  return (\n    <Layout>\n      <h2>Alle Vortragsthemen</h2>\n\n      <ul>\n        {talks.map(talk => {\n          const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk })\n\n          const speakersString = R.join(\", \")(speakersOfTalk.map(speaker => speaker.frontmatter.name))\n\n          const isNextTalk = upcomingEvent && talk.frontmatter.date === upcomingEvent.frontmatter.date\n\n          const style = isNextTalk ? { backgroundColor: \"rgb(231, 231, 231)\" } : undefined\n\n          return (\n            <li key={talk.id} style={style}>\n              <span className=\"lead\">\n                <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\n              </span>\n              {\" | \"}\n              <time dateTime={talk.frontmatter.date}>{formatDate(talk.frontmatter.date)}</time>\n              <p>von {speakersString}</p>\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport default TalksPage\n\nexport const query = graphql`\n  query {\n    talks: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { sourceName: { eq: \"talks\" } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date\n            time\n            virtual\n            tags\n            speaker\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Link from \"gatsby-link\"\n\nimport { Container, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Collapse } from \"reactstrap\"\n\nconst LinkItem = ({ to, children }) => {\n  return (\n    <NavItem>\n      <NavLink\n        className=\"link-item\"\n        tag={props => {\n          return (\n            <Link {...props} to={to} activeClassName=\"active\">\n              {children}\n            </Link>\n          )\n        }}\n      />\n    </NavItem>\n  )\n}\n\nclass PageHeader extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      collapsed: false,\n    }\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({ collapsed: !prevState.collapsed }))\n  }\n\n  render() {\n    return (\n      <Navbar color=\"light\" light expand=\"sm\">\n        <Container>\n          <NavbarBrand to=\"/\" tag={props => <Link {...props} />}>\n            Java User Group Görlitz\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n\n          <Collapse isOpen={this.state.collapsed} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <LinkItem to=\"/\">Aktuell</LinkItem>\n              <LinkItem to=\"/talks\">Vorträge</LinkItem>\n              <LinkItem to=\"/posters\">Plakate</LinkItem>\n              <LinkItem to=\"/unterstuetzer\">Unterstützer</LinkItem>\n              <LinkItem to=\"/about\">About</LinkItem>\n              <LinkItem to=\"/mitmachen\">Mitmachen</LinkItem>\n            </Nav>\n          </Collapse>\n        </Container>\n      </Navbar>\n    )\n  }\n}\n\nexport default PageHeader\n","import React from \"react\"\n\nimport { Link } from \"gatsby\"\n\nconst PageFooter = () => (\n  <footer className=\"container footer\">\n    <p>\n      <Link to=\"/impressum\">Impressum</Link> |{\" \"}\n      <Link to=\"/datenschutz\">Datenschutz</Link>\n    </p>\n  </footer>\n)\n\nexport default PageFooter\n","import React from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport { faTwitter, faFacebook, faGithub } from \"@fortawesome/free-brands-svg-icons\"\nimport { faEnvelope, faCalendarAlt, faRss } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { Col, Row } from \"reactstrap\"\n\nconst Sidebar = ({ logo }) => (\n  <div className=\"sidebar\">\n    <div>\n      <Row>\n        <Col sm=\"6\" xs=\"12\" md=\"12\">\n          <img alt=\"Logo der JUG Görlitz\" src={require(\"../../content/images/logo.png\")} />\n        </Col>\n        <Col sm=\"6\" xs=\"12\" md=\"12\">\n          <h3>\n            Wir sind Mitglied im\n            <br />\n            <a href=\"http://www.ijug.eu/\">iJUG Verband</a>\n          </h3>\n\n          <h3>Andere Medien</h3>\n          <ul className=\"list-unstyled\">\n            <li>\n              <a href=\"https://twitter.com/jug_gr\">\n                <FontAwesomeIcon icon={faTwitter} /> Twitter\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.facebook.com/juggr\">\n                <FontAwesomeIcon icon={faFacebook} /> Facebook\n              </a>\n            </li>\n            <li>\n              <a href=\"https://groups.google.com/d/forum/juggr\">\n                <FontAwesomeIcon icon={faEnvelope} /> Mailing-List\n              </a>\n            </li>\n            <li>\n              <a href=\"https://github.com/juggr\">\n                <FontAwesomeIcon icon={faGithub} /> Github\n              </a>\n            </li>\n            <li>\n              <a href=\"https://calendar.google.com/calendar/embed?src=gtgjid1tkrv0pl7o1hsqr3d8d8%40group.calendar.google.com&ctz=Europe/Berlin\">\n                <FontAwesomeIcon icon={faCalendarAlt} /> Kalender\n              </a>\n              <a href=\"https://www.google.com/calendar/ical/gtgjid1tkrv0pl7o1hsqr3d8d8%40group.calendar.google.com/public/basic.ics\">\n                (ICAL)\n              </a>\n            </li>\n            <li>\n              <FontAwesomeIcon icon={faRss} /> Feeds:\n              <ul>\n                <li>\n                  <a href=\"/atom.xml\">Atom</a>\n                </li>\n                <li>\n                  <a href=\"/rss.xml\">RSS</a>\n                </li>\n                <li>\n                  <a href=\"/feed.json\">JSON</a>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </Col>\n      </Row>\n    </div>\n\n    <br />\n\n    <br />\n    <a href=\"https://www.javaland.eu\">\n      <img\n        alt=\"Banner für die JavaLand 2022 Konferenz\"\n        src={require(\"../../content/images/javaland_2022_banner.jpg\")}\n      />\n    </a>\n\n    <br />\n    <a href=\"https://jax.de/\">\n      <img alt=\"Banner für die JAX 2022 Konferenz\" src={require(\"../../content/images/jax22_banner.jpg\")} />\n    </a>\n\n    <br />\n  </div>\n)\n\nexport default Sidebar\n","import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport {Container, Row, Col} from \"reactstrap\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport \"../styles/style.css\"\n\nimport PageHeader from \"./page-header\"\nimport PageFooter from \"./page-footer\"\nimport Sidebar from \"./sidebar\"\n\nimport fontawesome from '@fortawesome/fontawesome'\n\nfontawesome.config = {\n  autoAddCss: false\n}\n\nconst Layout = ({ children, data }) => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query SiteTitleQuery {\n          site {\n            siteMetadata {\n              title\n              description\n            }\n          }\n\n          logo: file(relativePath:{eq: \"logo.png\"}) {\n            id\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      `}\n      render={data => (\n        <>\n          <Helmet\n            title={data.site.siteMetadata.title}\n            meta={[\n              { name: \"description\", content: data.site.siteMetadata.description },\n              {\n                name: \"keywords\",\n                content: \"java, usergroup, görlitz, programmierung\",\n              },\n            ]}\n          >\n            <style>{fontawesome.dom.css()}</style>\n          </Helmet>\n\n          <PageHeader />\n          <Container style={{\n            marginTop: \"1em\"\n          }}>\n            <Row>\n              <Col md=\"9\">\n                {children}\n              </Col>\n\n              <Col md=\"3\">\n                  <Sidebar logo={data.logo}/>\n              </Col>\n            </Row>\n          </Container>\n\n          <PageFooter />\n        </>\n      )}\n    />\n  )\n}\n\n\nexport default Layout\n","module.exports = __webpack_public_path__ + \"static/logo-e9c103f16829b2a6e46db56f7af9a0e2.png\";","module.exports = __webpack_public_path__ + \"static/javaland_2022_banner-666e3350825aa93136a86e90e3c4c908.jpg\";","module.exports = __webpack_public_path__ + \"static/jax22_banner-496a46f0a2b28e902743324417214f34.jpg\";","import moment from \"moment\"\n\nimport \"moment/locale/de\"\n\nmoment.locale(\"de\")\n\nconst formatDate = date => moment(date).format(\"LL\")\n\nexport default formatDate","const R = require(\"ramda\")\n\n/**\n * For each talk we cannot directly query the speaker info (especially the name) but only the speakerSlugs (not the full slug but the important\n * speaker-identifier with which we can create the slug)\n * we have to query all speakers in a separate query. Then we need to extract from this allSpeakers-list\n * only those speaker info objects that belong to a given talk. This is what this method is doing.\n *\n * @param allSpeakers an array of all speaker objects\n * @param talk a talk object\n */\nconst findSpeakersForTalk = ({ allSpeakers, talk }) => {\n  return R.innerJoin(\n    (speaker, slug) => speaker.fields.slug === `/speakers/${slug}/`,\n    allSpeakers,\n    talk.frontmatter.speaker\n  )\n}\n\nmodule.exports = findSpeakersForTalk","import moment from \"moment/moment\"\nimport * as R from \"ramda\"\n\n/**\n * This function is used to determine the next upcoming event based on a list of events and the current date.\n * This is used to mark the next event in the list of all events and to determine which talk to show on the front page.\n *\n * If there is no event in the list the is in the future of today, then the last event is used.\n *\n *\n * @param allEvents a list of events\n * @param extractDate an optional function to extract the date from the event objects.\n * If no function is provided then a property \"frontmatter.date\" is used based on the markdown standard\n * @param today a date object of today. Usualy created by \"new Date()\" or a string representing today.\n * Basically anything that can parsed by moment.js\n */\nconst getUpcomingEvent = ({ allEvents, extractDate, today }) => {\n  if(!allEvents) {\n    return undefined\n  }\n\n  const extractor = extractDate ? extractDate : edge => edge.frontmatter.date\n\n  const sortedEvents = R.sortBy(extractor)(allEvents)\n\n  if(sortedEvents.length === 1) {\n    return sortedEvents[0]\n  }\n\n  const todayMoment = moment(today).startOf(\"day\")\n\n  const datesAfter = R.filter(event => {\n    const date = moment(extractor(event)).startOf(\"day\")\n\n    return todayMoment.isSameOrBefore(date)\n  })(sortedEvents)\n\n  if(datesAfter && datesAfter.length > 0) {\n    return datesAfter[0]\n  } else {\n    return R.reverse(sortedEvents)[0]\n  }\n}\n\nexport default getUpcomingEvent"],"sourceRoot":""}