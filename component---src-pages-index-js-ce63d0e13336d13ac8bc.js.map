{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/format-date.js","webpack:///./src/utils/find-speakers-for-talk.js","webpack:///./src/utils/get-upcoming-event.js","webpack:///./src/components/speaker-profile.js","webpack:///./src/components/talk-content.js"],"names":["PostPage","_ref","post","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","gatsby__WEBPACK_IMPORTED_MODULE_2__","Link","to","fields","slug","frontmatter","title","date","Object","_utils_format_date__WEBPACK_IMPORTED_MODULE_5__","dangerouslySetInnerHTML","__html","html","t","default","_ref2","data","talks","edges","map","edge","node","posts","length","sortedPosts","ramda__WEBPACK_IMPORTED_MODULE_1__","sortWith","descend","_components_layout__WEBPACK_IMPORTED_MODULE_3__","key","today","Date","upcomingEvent","_utils_get_upcoming_event__WEBPACK_IMPORTED_MODULE_4__","allEvents","speakers","locations","allSpeakers","allLocations","location","filter","locationId","speakersOfTalk","_utils_find_speakers_for_talk__WEBPACK_IMPORTED_MODULE_7___default","talk","_components_talk_content__WEBPACK_IMPORTED_MODULE_6__","speakerList","linkToDetailsPage","query","moment__WEBPACK_IMPORTED_MODULE_0___default","locale","__webpack_exports__","format","257","e","R","__webpack_require__","module","exports","innerJoin","speaker","extractDate","extractor","sortedEvents","sortBy","todayMoment","moment_moment__WEBPACK_IMPORTED_MODULE_0___default","startOf","datesAfter","event","isSameOrBefore","reverse","260","n","r","l","i","c","u","m","o","s","f","speaker_profile","react_default","reactstrap_es","d","k","pic","b","sm","xs","style","textAlign","maxWidth","gatsby_browser_entry","gatsby_image_default","alt","fluid","childImageSharp","name","twitter_name","href","className","talk_content_SpeakerHeadline","es","intersperse","talk_content_LocationInfo","info","Fragment","street","number","zip","city","talk_content_TagsLine","_ref3","tags","tag","index_es","icon","free_solid_svg_icons_index_es","talk_content_Headline","_ref4","_ref5","format_date","poster","id"],"mappings":"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","file":"component---src-pages-index-js-ce63d0e13336d13ac8bc.js","sourcesContent":["import React from \"react\"\r\n\r\nimport * as R from \"ramda\"\r\n\r\nimport { graphql, Link } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport getUpcomingEvent from \"../utils/get-upcoming-event\"\r\nimport formatDate from \"../utils/format-date\"\r\nimport TalkContent from \"../components/talk-content\"\r\nimport findSpeakersForTalk from \"../utils/find-speakers-for-talk\"\r\n\r\nconst PostPage = ({ post }) => (\r\n  <div>\r\n    <h2>\r\n      <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\r\n    </h2>\r\n\r\n    {post.frontmatter.date && <p>{formatDate(post.frontmatter.date)}</p>}\r\n\r\n    <div dangerouslySetInnerHTML={{ __html: post.html }} />\r\n    <hr />\r\n  </div>\r\n)\r\n\r\nconst IndexPage = ({ data }) => {\r\n  const talks = data.talks.edges.map(edge => edge.node)\r\n  const posts = data.posts ? data.posts.edges.map(edge => edge.node) : []\r\n\r\n  if (posts.length > 0) {\r\n    const sortedPosts = R.sortWith([R.descend(post => post.frontmatter.date)])(posts)\r\n\r\n    return (\r\n      <Layout>\r\n        {sortedPosts.map(post => (\r\n          <PostPage key={post.fields.slug} post={post} />\r\n        ))}\r\n      </Layout>\r\n    )\r\n  } else {\r\n    const today = new Date()\r\n\r\n    const upcomingEvent = getUpcomingEvent({ allEvents: talks, today })\r\n\r\n    const { speakers, locations } = data\r\n\r\n    const allSpeakers = speakers.edges.map(edge => edge.node)\r\n    const allLocations = locations.edges.map(edge => edge.node)\r\n\r\n    const location = R.filter(location => location.fields.locationId === upcomingEvent.frontmatter.location)(\r\n      allLocations\r\n    )[0]\r\n    const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk: upcomingEvent })\r\n\r\n    return (\r\n      <Layout>\r\n        <TalkContent talk={upcomingEvent} speakerList={speakersOfTalk} location={location} linkToDetailsPage={true} />\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const query = graphql`\r\n  query {\r\n    talks: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"talks\" } } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            title\r\n            date\r\n            speaker\r\n            location\r\n            poster {\r\n              childImageSharp {\r\n                fluid {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            tags\r\n          }\r\n          fields {\r\n            slug\r\n            sourceName\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    posts: allMarkdownRemark(\r\n      filter: { fields: { sourceName: { eq: \"posts\" } }, frontmatter: { show_on_frontpage: { eq: true } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            title\r\n            date\r\n            show_on_frontpage\r\n          }\r\n          fields {\r\n            slug\r\n            sourceName\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            name\r\n            pic {\r\n              childImageSharp {\r\n                fluid {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            twitter_name\r\n          }\r\n          fields {\r\n            slug\r\n            speakerId\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    locations: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"locations\" } } }) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            locationId\r\n          }\r\n          frontmatter {\r\n            name\r\n            number\r\n            info\r\n            zip\r\n            city\r\n            street\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import moment from \"moment\"\r\n\r\nimport \"moment/locale/de\"\r\n\r\nmoment.locale(\"de\")\r\n\r\nconst formatDate = date => moment(date).format(\"LL\")\r\n\r\nexport default formatDate","const R = require(\"ramda\")\r\n\r\n/**\r\n * For each talk we cannot directly query the speaker info (especially the name) but only the speakerSlugs (not the full slug but the important\r\n * speaker-identifier with which we can create the slug)\r\n * we have to query all speakers in a separate query. Then we need to extract from this allSpeakers-list\r\n * only those speaker info objects that belong to a given talk. This is what this method is doing.\r\n *\r\n * @param allSpeakers an array of all speaker objects\r\n * @param talk a talk object\r\n */\r\nconst findSpeakersForTalk = ({ allSpeakers, talk }) => {\r\n  return R.innerJoin(\r\n    (speaker, slug) => speaker.fields.slug === `/speakers/${slug}/`,\r\n    allSpeakers,\r\n    talk.frontmatter.speaker\r\n  )\r\n}\r\n\r\nmodule.exports = findSpeakersForTalk","import moment from \"moment/moment\"\r\nimport * as R from \"ramda\"\r\n\r\n/**\r\n * This function is used to determine the next upcoming event based on a list of events and the current date.\r\n * This is used to mark the next event in the list of all events and to determine which talk to show on the front page.\r\n *\r\n * If there is no event in the list the is in the future of today, then the last event is used.\r\n *\r\n *\r\n * @param allEvents a list of events\r\n * @param extractDate an optional function to extract the date from the event objects.\r\n * If no function is provided then a property \"frontmatter.date\" is used based on the markdown standard\r\n * @param today a date object of today. Usualy created by \"new Date()\" or a string representing today.\r\n * Basically anything that can parsed by moment.js\r\n */\r\nconst getUpcomingEvent = ({ allEvents, extractDate, today }) => {\r\n  if(!allEvents) {\r\n    return undefined\r\n  }\r\n\r\n  const extractor = extractDate ? extractDate : edge => edge.frontmatter.date\r\n\r\n  const sortedEvents = R.sortBy(extractor)(allEvents)\r\n\r\n  if(sortedEvents.length === 1) {\r\n    return sortedEvents[0]\r\n  }\r\n\r\n  const todayMoment = moment(today).startOf(\"day\")\r\n\r\n  const datesAfter = R.filter(event => {\r\n    const date = moment(extractor(event)).startOf(\"day\")\r\n\r\n    return todayMoment.isSameOrBefore(date)\r\n  })(sortedEvents)\r\n\r\n  if(datesAfter && datesAfter.length > 0) {\r\n    return datesAfter[0]\r\n  } else {\r\n    return R.reverse(sortedEvents)[0]\r\n  }\r\n}\r\n\r\nexport default getUpcomingEvent","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nimport Img from \"gatsby-image\"\r\n\r\nimport { Container, Col, Row } from \"reactstrap\"\r\n\r\nconst SpeakerProfile = ({ speaker }) => {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {speaker.frontmatter.pic && (\r\n          <Col sm=\"6\" xs=\"12\" style={{textAlign: \"center\", maxWidth: \"400px\"}}>\r\n            <Link to={speaker.fields.slug}>\r\n              <Img alt=\"speaker\" fluid={speaker.frontmatter.pic.childImageSharp.fluid} />\r\n            </Link>\r\n          </Col>\r\n        )}\r\n\r\n        <Col sm=\"6\" xs=\"12\">\r\n          <div>\r\n            <p>\r\n              <Link to={speaker.fields.slug}>\r\n                <strong>{speaker.frontmatter.name}</strong>\r\n              </Link>\r\n            </p>\r\n\r\n            {speaker.frontmatter.twitter_name && (\r\n              <p>\r\n                Twitter:{\" \"}\r\n                <a href={`https://twitter.com/${speaker.frontmatter.twitter_name}`}>{`@${\r\n                  speaker.frontmatter.twitter_name\r\n                }`}</a>\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"description\" dangerouslySetInnerHTML={{ __html: speaker.html }} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SpeakerProfile\r\n","import React from \"react\"\r\nimport formatDate from \"../utils/format-date\"\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nimport { Link } from \"gatsby\"\r\n\r\nimport * as R from \"ramda\"\r\nimport SpeakerProfile from \"./speaker-profile\"\r\n\r\nimport Img from \"gatsby-image\"\r\n\r\nconst SpeakerHeadline = ({ speakerList }) => (\r\n  <span className=\"lead\">\r\n    von{\" \"}\r\n    {R.intersperse(\", \")(\r\n      speakerList.map(speaker => (\r\n        <Link key={speaker.fields.slug} to={speaker.fields.slug}>\r\n          {speaker.frontmatter.name}\r\n        </Link>\r\n      ))\r\n    )}\r\n  </span>\r\n)\r\n\r\nconst LocationInfo = ({ location }) => {\r\n  const { frontmatter } = location\r\n\r\n  return (\r\n    <Link to={location.fields.slug}>\r\n      <address>\r\n        {frontmatter.name}\r\n        <br />\r\n        {frontmatter.info && (\r\n          <>\r\n            {frontmatter.info}\r\n            <br />\r\n          </>\r\n        )}\r\n        {`${frontmatter.street} ${frontmatter.number}`}\r\n        <br />\r\n        {`${frontmatter.zip} ${frontmatter.city}`}\r\n        <br />\r\n      </address>\r\n    </Link>\r\n  )\r\n}\r\n\r\nconst TagsLine = ({ tags }) => {\r\n  if (tags) {\r\n    return (\r\n      <>\r\n        {R.intersperse(\", \")(\r\n          tags.map(tag => (\r\n            <Link key={tag} to={`/tags/#${tag}`}>\r\n              <FontAwesomeIcon icon={faTag} /> {tag}\r\n            </Link>\r\n          ))\r\n        )}\r\n      </>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nconst Headline = ({ talk, linkToDetailsPage }) => {\r\n  if (linkToDetailsPage) {\r\n    return (\r\n      <h2>\r\n        <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\r\n      </h2>\r\n    )\r\n  } else {\r\n    return <h2>{talk.frontmatter.title}</h2>\r\n  }\r\n}\r\n\r\nconst TalkContent = ({ talk, speakerList, location, linkToDetailsPage }) => (\r\n  <>\r\n    <Headline talk={talk} linkToDetailsPage={linkToDetailsPage} />\r\n    <SpeakerHeadline speakerList={speakerList} /> | {formatDate(talk.frontmatter.date)}\r\n    <p>\r\n      <TagsLine tags={talk.frontmatter.tags} />\r\n    </p>\r\n    <article className=\"talk-content\">\r\n      <div dangerouslySetInnerHTML={{ __html: talk.html }} />\r\n\r\n      {talk.frontmatter.poster && <Img fluid={talk.frontmatter.poster.childImageSharp.fluid} />}\r\n\r\n      <hr />\r\n\r\n      {speakerList.map(speaker => (\r\n        <SpeakerProfile key={speaker.id} speaker={speaker} />\r\n      ))}\r\n\r\n      <hr />\r\n\r\n      <div>\r\n        <p>Datum: {formatDate(talk.frontmatter.date)}, 19:00 Uhr</p>\r\n        Ort: {location ? <LocationInfo location={location} /> : <span>wird noch bekannt gegeben</span>}\r\n      </div>\r\n\r\n      <br />\r\n      <p>\r\n        Die Veranstaltung wird durch die <i>Java User Group Görlitz</i> (im{\" \"}\r\n        <a href=\"http://www.ijug.eu/\">iJUG Verband</a>) organisiert.\r\n      </p>\r\n    </article>\r\n  </>\r\n)\r\n\r\nexport default TalkContent\r\n"],"sourceRoot":""}