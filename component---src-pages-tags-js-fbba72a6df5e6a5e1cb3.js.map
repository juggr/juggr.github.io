{"version":3,"sources":["webpack:///./node_modules/reactstrap/es/Badge.js","webpack:///./src/pages/tags.js"],"names":["_excluded","props","className","cssModule","color","innerRef","pill","Tag","tag","attributes","classes","href","createElement","ref","defaultProps","TagsPage","data","talks","edges","map","edge","node","allSpeakers","speakers","tags","R","s","talk","frontmatter","sort","talksWithSpeakers","speakersOfTalk","findSpeakersForTalk","talksGroupedByTag","filteredTalk","filter","includes","key","style","margin","icon","faTag","tagGroup","Fragment","id","speakersString","speaker","name","to","fields","slug","title","dateTime","date","formatDate"],"mappings":"mOAEIA,EAAY,CAAC,YAAa,YAAa,QAAS,WAAY,OAAQ,OAUpE,EAAQ,SAAeC,GACzB,IAAIC,EAAYD,EAAMC,UAClBC,EAAYF,EAAME,UAClBC,EAAQH,EAAMG,MACdC,EAAWJ,EAAMI,SACjBC,EAAOL,EAAMK,KACbC,EAAMN,EAAMO,IACZC,EAAa,YAA8BR,EAAOD,GAElDU,EAAU,YAAgB,IAAWR,EAAW,QAAS,SAAWE,IAAOE,GAAO,cAAuBH,GAM7G,OAJIM,EAAWE,MAAgB,SAARJ,IACrBA,EAAM,KAGY,IAAMK,cAAcL,EAAK,YAAS,GAAIE,EAAY,CACpEP,UAAWQ,EACXG,IAAKR,MAIT,EAAMS,aA3Ba,CACjBV,MAAO,YACPE,MAAM,EACNE,IAAK,QAyBQ,Q,6FCkDAO,UArEE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZC,EAAQD,EAAKC,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAE1CC,EAAcN,EAAKO,SAASL,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAEnDG,EAAOC,KACX,SAAAC,GAAC,OAAIA,IACLD,IAEEA,KAAQ,SAAAE,GAAI,OAAIA,EAAKC,YAAYJ,OAAjCC,CAAuCR,KAEzCY,OAEIC,EAAoBb,EAAME,KAAI,SAAAQ,GAClC,IAAMI,EAAiBC,IAAoB,CAAEV,cAAaK,SAE1D,OAAO,OAAP,UAAYA,EAAZ,CAAkBI,sBAGdE,EAAoBT,EAAKL,KAAI,SAAAX,GACjC,IAAM0B,EAAeJ,EAClBK,QAAO,SAAAR,GAAI,OAAIA,EAAKC,YAAYJ,QAChCW,QAAO,SAAAR,GAAI,OAAIA,EAAKC,YAAYJ,KAAKY,SAAS5B,MAEjD,MAAO,CACLA,MACAS,MAAOiB,MAIX,OACE,kBAAC,IAAD,KACE,oCACA,2BACGV,EAAKL,KAAI,SAAAX,GAAG,OACX,kBAAC,EAAD,CAAO6B,IAAK7B,EAAK8B,MAAO,CAAEC,OAAQ,UAAY5B,KAAI,IAAMH,GACtD,kBAAC,IAAD,CAAiBgC,KAAMC,MADzB,IACoCjC,OAKvCyB,EAAkBd,KAAI,SAAAuB,GACrB,IAAQlC,EAAekC,EAAflC,IAAKS,EAAUyB,EAAVzB,MAEb,OACE,kBAAC,IAAM0B,SAAP,CAAgBN,IAAK7B,GACnB,wBAAIoC,GAAIpC,GAAMA,GACd,4BACGS,EAAME,KAAI,SAAAQ,GACT,IAAMkB,EAAiBpB,IAAO,KAAPA,CAAaE,EAAKI,eAAeZ,KAAI,SAAA2B,GAAO,OAAIA,EAAQlB,YAAYmB,SAE3F,OACE,wBAAIV,IAAKV,EAAKiB,IACZ,0BAAM1C,UAAU,QACd,kBAAC,OAAD,CAAM8C,GAAIrB,EAAKsB,OAAOC,MAAOvB,EAAKC,YAAYuB,QAE/C,MAJH,IAIU,0BAAMC,SAAUzB,EAAKC,YAAYyB,MAAOC,YAAW3B,EAAKC,YAAYyB,OAC5E,kCAAQR","file":"component---src-pages-tags-js-fbba72a6df5e6a5e1cb3.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"color\", \"innerRef\", \"pill\", \"tag\"];\nimport React from 'react';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar defaultProps = {\n  color: 'secondary',\n  pill: false,\n  tag: 'span'\n};\n\nvar Badge = function Badge(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      innerRef = props.innerRef,\n      pill = props.pill,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, 'badge', 'badge-' + color, pill ? 'badge-pill' : false), cssModule);\n\n  if (attributes.href && Tag === 'span') {\n    Tag = 'a';\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nBadge.defaultProps = defaultProps;\nexport default Badge;","import React from \"react\"\r\n\r\nimport { graphql, Link } from \"gatsby\"\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nimport { Badge } from \"reactstrap\"\r\n\r\nimport * as R from \"ramda\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport findSpeakersForTalk from \"../utils/find-speakers-for-talk\"\r\nimport formatDate from \"../utils/format-date\"\r\n\r\nconst TagsPage = ({ data }) => {\r\n  const talks = data.talks.edges.map(edge => edge.node)\r\n\r\n  const allSpeakers = data.speakers.edges.map(edge => edge.node)\r\n\r\n  const tags = R.filter(\r\n    s => s,\r\n    R.uniq(\r\n      // R.chain is equal to flatMap\r\n      R.chain(talk => talk.frontmatter.tags)(talks)\r\n    )\r\n  ).sort()\r\n\r\n  const talksWithSpeakers = talks.map(talk => {\r\n    const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk })\r\n\r\n    return { ...talk, speakersOfTalk }\r\n  })\r\n\r\n  const talksGroupedByTag = tags.map(tag => {\r\n    const filteredTalk = talksWithSpeakers\r\n      .filter(talk => talk.frontmatter.tags)\r\n      .filter(talk => talk.frontmatter.tags.includes(tag))\r\n\r\n    return {\r\n      tag,\r\n      talks: filteredTalk,\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Layout>\r\n      <h2>Tags</h2>\r\n      <p>\r\n        {tags.map(tag => (\r\n          <Badge key={tag} style={{ margin: \"0.1rem\" }} href={`#${tag}`}>\r\n            <FontAwesomeIcon icon={faTag} /> {tag}\r\n          </Badge>\r\n        ))}\r\n      </p>\r\n\r\n      {talksGroupedByTag.map(tagGroup => {\r\n        const { tag, talks } = tagGroup\r\n\r\n        return (\r\n          <React.Fragment key={tag}>\r\n            <h3 id={tag}>{tag}</h3>\r\n            <ul>\r\n              {talks.map(talk => {\r\n                const speakersString = R.join(\", \")(talk.speakersOfTalk.map(speaker => speaker.frontmatter.name))\r\n\r\n                return (\r\n                  <li key={talk.id}>\r\n                    <span className=\"lead\">\r\n                      <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\r\n                    </span>\r\n                    {\" | \"} <time dateTime={talk.frontmatter.date}>{formatDate(talk.frontmatter.date)}</time>\r\n                    <p>von {speakersString}</p>\r\n                  </li>\r\n                )\r\n              })}\r\n            </ul>\r\n          </React.Fragment>\r\n        )\r\n      })}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default TagsPage\r\n\r\nexport const query = graphql`\r\n  query {\r\n    talks: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"talks\" } } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            date\r\n            tags\r\n            speaker\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}