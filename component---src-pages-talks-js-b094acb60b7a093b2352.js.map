{"version":3,"sources":["webpack:///./src/pages/talks.js","webpack:///./src/utils/get-upcoming-event.js"],"names":["TalksPage","data","talks","edges","map","edge","node","allSpeakers","speakers","today","Date","upcomingEvent","getUpcomingEvent","allEvents","talk","speakersOfTalk","findSpeakersForTalk","speakersString","R","speaker","frontmatter","name","style","date","backgroundColor","undefined","key","id","className","to","fields","slug","title","dateTime","formatDate","extractDate","extractor","sortedEvents","length","todayMoment","moment","startOf","datesAfter","event","isSameOrBefore"],"mappings":"8FAAA,iHAoDeA,UAvCG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAAQD,EAAKC,MAAMC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAE1CC,EAAcN,EAAKO,SAASL,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAEnDG,EAAQ,IAAIC,KAEZC,EAAgBC,YAAiB,CAAEC,UAAWX,EAAOO,UAE3D,OACE,kBAAC,IAAD,KACE,mDAEA,4BACGP,EAAME,KAAI,SAAAU,GACT,IAAMC,EAAiBC,IAAoB,CAAET,cAAaO,SAEpDG,EAAiBC,IAAO,KAAPA,CAAaH,EAAeX,KAAI,SAAAe,GAAO,OAAIA,EAAQC,YAAYC,SAIhFC,EAFaX,GAAiBG,EAAKM,YAAYG,OAASZ,EAAcS,YAAYG,KAE7D,CAAEC,gBAAiB,2BAAyBC,EAEvE,OACE,wBAAIC,IAAKZ,EAAKa,GAAIL,MAAOA,GACvB,0BAAMM,UAAU,QACd,kBAAC,OAAD,CAAMC,GAAIf,EAAKgB,OAAOC,MAAOjB,EAAKM,YAAYY,QAE/C,MACD,0BAAMC,SAAUnB,EAAKM,YAAYG,MAAOW,YAAWpB,EAAKM,YAAYG,OACpE,kCAAQN,W,oCC3CtB,6DA4CeL,IA5BU,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,UAAWsB,EAAyB,EAAzBA,YAAa1B,EAAY,EAAZA,MAClD,GAAII,EAAJ,CAIA,IAAMuB,EAAYD,GAA4B,SAAA9B,GAAI,OAAIA,EAAKe,YAAYG,MAEjEc,EAAenB,IAASkB,EAATlB,CAAoBL,GAEzC,GAA2B,IAAxBwB,EAAaC,OACd,OAAOD,EAAa,GAGtB,IAAME,EAAcC,IAAO/B,GAAOgC,QAAQ,OAEpCC,EAAaxB,KAAS,SAAAyB,GAC1B,IAAMpB,EAAOiB,IAAOJ,EAAUO,IAAQF,QAAQ,OAE9C,OAAOF,EAAYK,eAAerB,KAHjBL,CAIhBmB,GAEH,OAAGK,GAAcA,EAAWJ,OAAS,EAC5BI,EAAW,GAEXxB,IAAUmB,GAAc","file":"component---src-pages-talks-js-b094acb60b7a093b2352.js","sourcesContent":["import React from \"react\"\n\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nimport formatDate from \"../utils/format-date\"\n\nimport * as R from \"ramda\"\n\nimport getUpcomingEvent from \"../utils/get-upcoming-event\"\nimport findSpeakersForTalk from \"../utils/find-speakers-for-talk\"\n\nconst TalksPage = ({ data }) => {\n  const talks = data.talks.edges.map(edge => edge.node)\n\n  const allSpeakers = data.speakers.edges.map(edge => edge.node)\n\n  const today = new Date()\n\n  const upcomingEvent = getUpcomingEvent({ allEvents: talks, today })\n\n  return (\n    <Layout>\n      <h2>Alle Vortragsthemen</h2>\n\n      <ul>\n        {talks.map(talk => {\n          const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk })\n\n          const speakersString = R.join(\", \")(speakersOfTalk.map(speaker => speaker.frontmatter.name))\n\n          const isNextTalk = upcomingEvent && talk.frontmatter.date === upcomingEvent.frontmatter.date\n\n          const style = isNextTalk ? { backgroundColor: \"rgb(231, 231, 231)\" } : undefined\n\n          return (\n            <li key={talk.id} style={style}>\n              <span className=\"lead\">\n                <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\n              </span>\n              {\" | \"}\n              <time dateTime={talk.frontmatter.date}>{formatDate(talk.frontmatter.date)}</time>\n              <p>von {speakersString}</p>\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport default TalksPage\n\nexport const query = graphql`\n  query {\n    talks: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { sourceName: { eq: \"talks\" } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date\n            time\n            virtual\n            tags\n            speaker\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import moment from \"moment/moment\"\nimport * as R from \"ramda\"\n\n/**\n * This function is used to determine the next upcoming event based on a list of events and the current date.\n * This is used to mark the next event in the list of all events and to determine which talk to show on the front page.\n *\n * If there is no event in the list the is in the future of today, then the last event is used.\n *\n *\n * @param allEvents a list of events\n * @param extractDate an optional function to extract the date from the event objects.\n * If no function is provided then a property \"frontmatter.date\" is used based on the markdown standard\n * @param today a date object of today. Usualy created by \"new Date()\" or a string representing today.\n * Basically anything that can parsed by moment.js\n */\nconst getUpcomingEvent = ({ allEvents, extractDate, today }) => {\n  if(!allEvents) {\n    return undefined\n  }\n\n  const extractor = extractDate ? extractDate : edge => edge.frontmatter.date\n\n  const sortedEvents = R.sortBy(extractor)(allEvents)\n\n  if(sortedEvents.length === 1) {\n    return sortedEvents[0]\n  }\n\n  const todayMoment = moment(today).startOf(\"day\")\n\n  const datesAfter = R.filter(event => {\n    const date = moment(extractor(event)).startOf(\"day\")\n\n    return todayMoment.isSameOrBefore(date)\n  })(sortedEvents)\n\n  if(datesAfter && datesAfter.length > 0) {\n    return datesAfter[0]\n  } else {\n    return R.reverse(sortedEvents)[0]\n  }\n}\n\nexport default getUpcomingEvent"],"sourceRoot":""}