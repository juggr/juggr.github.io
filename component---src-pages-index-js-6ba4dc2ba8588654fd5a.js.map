{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/format-date.js","webpack:///./src/utils/find-speakers-for-talk.js","webpack:///./src/utils/get-upcoming-event.js","webpack:///./src/components/speaker-profile.js","webpack:///./src/components/talk-content.js"],"names":["PostPage","_ref","post","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","gatsby__WEBPACK_IMPORTED_MODULE_2__","Link","to","fields","slug","frontmatter","title","date","Object","_utils_format_date__WEBPACK_IMPORTED_MODULE_5__","dangerouslySetInnerHTML","__html","html","t","default","_ref2","data","talks","edges","map","edge","node","posts","length","sortedPosts","ramda__WEBPACK_IMPORTED_MODULE_1__","sortWith","descend","_components_layout__WEBPACK_IMPORTED_MODULE_3__","key","today","Date","upcomingEvent","_utils_get_upcoming_event__WEBPACK_IMPORTED_MODULE_4__","allEvents","speakers","locations","allSpeakers","allLocations","location","filter","locationId","speakersOfTalk","_utils_find_speakers_for_talk__WEBPACK_IMPORTED_MODULE_7___default","talk","_components_talk_content__WEBPACK_IMPORTED_MODULE_6__","speakerList","linkToDetailsPage","query","moment__WEBPACK_IMPORTED_MODULE_0___default","locale","__webpack_exports__","format","256","e","n","R","__webpack_require__","module","exports","innerJoin","speaker","extractDate","extractor","sortedEvents","sortBy","todayMoment","moment_moment__WEBPACK_IMPORTED_MODULE_0___default","datesAfter","event","isBefore","reverse","259","r","l","i","c","u","o","m","s","f","speaker_profile","react_default","reactstrap_es","d","k","pic","b","sm","xs","style","textAlign","maxWidth","gatsby_browser_entry","gatsby_image_default","alt","fluid","childImageSharp","name","twitter_name","href","className","talk_content_SpeakerHeadline","es","intersperse","talk_content_LocationInfo","console","log","JSON","stringify","info","Fragment","street","number","zip","city","talk_content_TagsLine","_ref3","tags","tag","index_es","icon","free_solid_svg_icons_index_es","talk_content_Headline","_ref4","_ref5","format_date","poster","id"],"mappings":"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","file":"component---src-pages-index-js-6ba4dc2ba8588654fd5a.js","sourcesContent":["import React from \"react\"\n\nimport * as R from \"ramda\"\n\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport getUpcomingEvent from \"../utils/get-upcoming-event\"\nimport formatDate from \"../utils/format-date\"\nimport TalkContent from \"../components/talk-content\"\nimport findSpeakersForTalk from \"../utils/find-speakers-for-talk\"\n\nconst PostPage = ({ post }) => (\n  <div>\n    <h2>\n      <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n    </h2>\n\n    {post.frontmatter.date && <p>{formatDate(post.frontmatter.date)}</p>}\n\n    <div dangerouslySetInnerHTML={{ __html: post.html }} />\n    <hr />\n  </div>\n)\n\nconst IndexPage = ({ data }) => {\n  const talks = data.talks.edges.map(edge => edge.node)\n  const posts = data.posts ? data.posts.edges.map(edge => edge.node) : []\n\n  if (posts.length > 0) {\n    const sortedPosts = R.sortWith([R.descend(post => post.frontmatter.date)])(posts)\n\n    return (\n      <Layout>\n        {sortedPosts.map(post => (\n          <PostPage key={post.fields.slug} post={post} />\n        ))}\n      </Layout>\n    )\n  } else {\n    const today = new Date()\n\n    const upcomingEvent = getUpcomingEvent({ allEvents: talks, today })\n\n    const { speakers, locations } = data\n\n    const allSpeakers = speakers.edges.map(edge => edge.node)\n    const allLocations = locations.edges.map(edge => edge.node)\n\n    const location = R.filter(location => location.fields.locationId === upcomingEvent.frontmatter.location)(\n      allLocations\n    )[0]\n    const speakersOfTalk = findSpeakersForTalk({ allSpeakers, talk: upcomingEvent })\n\n    return (\n      <Layout>\n        <TalkContent talk={upcomingEvent} speakerList={speakersOfTalk} location={location} linkToDetailsPage={true} />\n      </Layout>\n    )\n  }\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    talks: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"talks\" } } }) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            title\n            date\n            speaker\n            location\n            poster {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            slug\n            sourceName\n          }\n        }\n      }\n    }\n\n    posts: allMarkdownRemark(\n      filter: { fields: { sourceName: { eq: \"posts\" } }, frontmatter: { show_on_frontpage: { eq: true } } }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            title\n            date\n            show_on_frontpage\n          }\n          fields {\n            slug\n            sourceName\n          }\n        }\n      }\n    }\n\n    speakers: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"speakers\" } } }) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            name\n            pic {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            twitter_name\n          }\n          fields {\n            slug\n            speakerId\n          }\n        }\n      }\n    }\n\n    locations: allMarkdownRemark(filter: { fields: { sourceName: { eq: \"locations\" } } }) {\n      edges {\n        node {\n          fields {\n            slug\n            locationId\n          }\n          frontmatter {\n            name\n            number\n            info\n            zip\n            city\n            street\n          }\n        }\n      }\n    }\n  }\n`\n","import moment from \"moment\"\n\nimport \"moment/locale/de\"\n\nmoment.locale(\"de\")\n\nconst formatDate = date => moment(date).format(\"LL\")\n\nexport default formatDate","const R = require(\"ramda\")\n\n/**\n * For each talk we cannot directly query the speaker info (especially the name) but only the speakerSlugs (not the full slug but the important\n * speaker-identifier with which we can create the slug)\n * we have to query all speakers in a separate query. Then we need to extract from this allSpeakers-list\n * only those speaker info objects that belong to a given talk. This is what this method is doing.\n *\n * @param allSpeakers an array of all speaker objects\n * @param talk a talk object\n */\nconst findSpeakersForTalk = ({ allSpeakers, talk }) => {\n  return R.innerJoin(\n    (speaker, slug) => speaker.fields.slug === `/speakers/${slug}/`,\n    allSpeakers,\n    talk.frontmatter.speaker\n  )\n}\n\nmodule.exports = findSpeakersForTalk","import moment from \"moment/moment\"\nimport * as R from \"ramda\"\n\n/**\n * This function is used to determine the next upcoming event based on a list of events and the current date.\n * This is used to mark the next event in the list of all events and to determine which talk to show on the front page.\n *\n * If there is no event in the list the is in the future of today, then the last event is used.\n *\n *\n * @param allEvents a list of events\n * @param extractDate an optional function to extract the date from the event objects.\n * If no function is provided then a property \"frontmatter.date\" is used based on the markdown standard\n * @param today a date object of today. Usualy created by \"new Date()\" or a string representing today.\n * Basically anything that can parsed by moment.js\n */\nconst getUpcomingEvent = ({ allEvents, extractDate, today }) => {\n  if(!allEvents) {\n    return undefined\n  }\n\n  const extractor = extractDate ? extractDate : edge => edge.frontmatter.date\n\n  const sortedEvents = R.sortBy(extractor)(allEvents)\n\n  if(sortedEvents.length === 1) {\n    return sortedEvents[0]\n  }\n\n  const todayMoment = moment(today)\n\n  const datesAfter = R.filter(event => {\n    const date = moment(extractor(event))\n\n    return todayMoment.isBefore(date)\n  })(sortedEvents)\n\n  if(datesAfter && datesAfter.length > 0) {\n    return datesAfter[0]\n  } else {\n    return R.reverse(sortedEvents)[0]\n  }\n}\n\nexport default getUpcomingEvent","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Img from \"gatsby-image\"\n\nimport { Container, Col, Row } from \"reactstrap\"\n\nconst SpeakerProfile = ({ speaker }) => {\n  return (\n    <Container>\n      <Row>\n        {speaker.frontmatter.pic && (\n          <Col sm=\"6\" xs=\"12\" style={{textAlign: \"center\", maxWidth: \"400px\"}}>\n            <Link to={speaker.fields.slug}>\n              <Img alt=\"speaker\" fluid={speaker.frontmatter.pic.childImageSharp.fluid} />\n            </Link>\n          </Col>\n        )}\n\n        <Col sm=\"6\" xs=\"12\">\n          <div>\n            <p>\n              <Link to={speaker.fields.slug}>\n                <strong>{speaker.frontmatter.name}</strong>\n              </Link>\n            </p>\n\n            {speaker.frontmatter.twitter_name && (\n              <p>\n                Twitter:{\" \"}\n                <a href={`https://twitter.com/${speaker.frontmatter.twitter_name}`}>{`@${\n                  speaker.frontmatter.twitter_name\n                }`}</a>\n              </p>\n            )}\n          </div>\n\n          <div className=\"description\" dangerouslySetInnerHTML={{ __html: speaker.html }} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default SpeakerProfile\n","import React from \"react\"\nimport formatDate from \"../utils/format-date\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTag } from \"@fortawesome/free-solid-svg-icons\"\n\nimport { Link } from \"gatsby\"\n\nimport * as R from \"ramda\"\nimport SpeakerProfile from \"./speaker-profile\"\n\nimport Img from \"gatsby-image\"\n\nconst SpeakerHeadline = ({ speakerList }) => (\n  <span className=\"lead\">\n    von{\" \"}\n    {R.intersperse(\", \")(\n      speakerList.map(speaker => (\n        <Link key={speaker.fields.slug} to={speaker.fields.slug}>\n          {speaker.frontmatter.name}\n        </Link>\n      ))\n    )}\n  </span>\n)\n\nconst LocationInfo = ({ location }) => {\n  const { frontmatter } = location\n\n  console.log(\"frontmatter\", JSON.stringify(frontmatter, null, 4))\n\n  return (\n    <Link to={location.fields.slug}>\n      <address>\n        {frontmatter.name}\n        <br />\n        {frontmatter.info && (\n          <>\n            {frontmatter.info}\n            <br />\n          </>\n        )}\n        {`${frontmatter.street} ${frontmatter.number}`}\n        <br />\n        {`${frontmatter.zip} ${frontmatter.city}`}\n        <br />\n      </address>\n    </Link>\n  )\n}\n\nconst TagsLine = ({ tags }) => {\n  if (tags) {\n    return (\n      <>\n        {R.intersperse(\", \")(\n          tags.map(tag => (\n            <Link key={tag} to={`/tags/#${tag}`}>\n              <FontAwesomeIcon icon={faTag} /> {tag}\n            </Link>\n          ))\n        )}\n      </>\n    )\n  } else {\n    return null\n  }\n}\n\nconst Headline = ({ talk, linkToDetailsPage }) => {\n  if (linkToDetailsPage) {\n    return (\n      <h2>\n        <Link to={talk.fields.slug}>{talk.frontmatter.title}</Link>\n      </h2>\n    )\n  } else {\n    return <h2>{talk.frontmatter.title}</h2>\n  }\n}\n\nconst TalkContent = ({ talk, speakerList, location, linkToDetailsPage }) => (\n  <>\n    <Headline talk={talk} linkToDetailsPage={linkToDetailsPage} />\n    <SpeakerHeadline speakerList={speakerList} /> | {formatDate(talk.frontmatter.date)}\n    <p>\n      <TagsLine tags={talk.frontmatter.tags} />\n    </p>\n    <article>\n      <div dangerouslySetInnerHTML={{ __html: talk.html }} />\n\n      {talk.frontmatter.poster && <Img fluid={talk.frontmatter.poster.childImageSharp.fluid} />}\n\n      <hr />\n\n      {speakerList.map(speaker => (\n        <SpeakerProfile key={speaker.id} speaker={speaker} />\n      ))}\n\n      <hr />\n\n      <div>\n        <p>Datum: {formatDate(talk.frontmatter.date)}, 19:00 Uhr</p>\n        Ort: {location ? <LocationInfo location={location} /> : <span>wird noch bekannt gegeben</span>}\n      </div>\n\n      <br />\n      <p>\n        Die Veranstaltung wird durch die <i>Java User Group Görlitz</i> (im{\" \"}\n        <a href=\"http://www.ijug.eu/\">iJUG Verband</a>) organisiert.\n      </p>\n    </article>\n  </>\n)\n\nexport default TalkContent\n"],"sourceRoot":""}